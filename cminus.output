Terminals unused in grammar

    ERROR


State 131 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: declaration-list

    2 declaration-list: declaration-list declaration
    3                 | declaration

    4 declaration: var-declaration
    5            | fun-declaration
    6            | const-declaration
    7            | enum-declaration

    8 var-declaration: type-specifier ID ';'
    9                | type-specifier ID '[' NUM ']' ';'

   10 const-declaration: INT CONST ID '=' NUM ';'

   11 enum-declaration: ENUM ID ID ';'
   12                 | ENUM ID '{' id-list '}' ';'
   13                 | ENUM ID '{' id-list '}' ID ';'

   14 id-list: ID
   15        | id-list ',' ID

   16 fun-declaration: type-specifier ID '(' params ')' compound-stmt

   17 type-specifier: INT
   18               | VOID

   19 params: param-list
   20       | VOID

   21 param-list: param-list ',' param
   22           | param

   23 param: type-specifier ID
   24      | type-specifier ID '[' ']'

   25 compound-stmt: '{' local-declarations statement-list '}'

   26 local-declarations: local-declarations var-declaration
   27                   | local-declarations const-declaration
   28                   | local-declarations enum-declaration
   29                   | %empty

   30 statement-list: statement-list statement
   31               | %empty

   32 statement: expression-stmt
   33          | compound-stmt
   34          | selection-stmt
   35          | iteration-stmt
   36          | return-stmt

   37 expression-stmt: expression ';'
   38                | ';'

   39 selection-stmt: IF '(' expression ')' statement
   40               | IF '(' expression ')' statement ELSE statement

   41 iteration-stmt: WHILE '(' expression ')' statement

   42 return-stmt: RETURN ';'
   43            | RETURN expression ';'

   44 expression: var '=' expression
   45           | simple-expression

   46 var: ID
   47    | ID '[' expression ']'

   48 simple-expression: additive-expression relop additive-expression
   49                  | simple-expression logop additive-expression
   50                  | additive-expression

   51 relop: LTEQ
   52      | LT
   53      | GT
   54      | GTEQ
   55      | EQ
   56      | NEQ

   57 logop: AND
   58      | OR

   59 additive-expression: term
   60                    | additive-expression '+' term
   61                    | additive-expression '-' term

   62 term: factor
   63     | term '*' factor
   64     | term '/' factor
   65     | unary-expression

   66 unary-expression: unary_op factor

   67 unary_op: '!'
   68         | DEC
   69         | INC

   70 factor: NUM
   71       | '(' expression ')'
   72       | var
   73       | call

   74 call: ID '(' args ')'

   75 args: args-list
   76     | %empty

   77 args-list: args-list ',' expression
   78          | expression


Terminals, with rules where they appear

    $end (0) 0
    '!' (33) 67
    '(' (40) 16 39 40 41 71 74
    ')' (41) 16 39 40 41 71 74
    '*' (42) 63
    '+' (43) 60
    ',' (44) 15 21 77
    '-' (45) 61
    '/' (47) 64
    ';' (59) 8 9 10 11 12 13 37 38 42 43
    '=' (61) 10 44
    '[' (91) 9 24 47
    ']' (93) 9 24 47
    '{' (123) 12 13 25
    '}' (125) 12 13 25
    error (256)
    NUM (258) 9 10 70
    ID (259) 8 9 10 11 12 13 14 15 16 23 24 46 47 74
    ELSE (260) 40
    IF (261) 39 40
    INT (262) 10 17
    RETURN (263) 42 43
    VOID (264) 18 20
    WHILE (265) 41
    EQ (266) 55
    NEQ (267) 56
    LT (268) 52
    GT (269) 53
    LTEQ (270) 51
    GTEQ (271) 54
    ERROR (272)
    CONST (273) 10
    ENUM (274) 11 12 13
    AND (275) 57
    OR (276) 58
    INC (277) 69
    DEC (278) 68


Nonterminals, with rules where they appear

    $accept (38)
        on left: 0
    program (39)
        on left: 1
        on right: 0
    declaration-list (40)
        on left: 2 3
        on right: 1 2
    declaration (41)
        on left: 4 5 6 7
        on right: 2 3
    var-declaration (42)
        on left: 8 9
        on right: 4 26
    const-declaration (43)
        on left: 10
        on right: 6 27
    enum-declaration (44)
        on left: 11 12 13
        on right: 7 28
    id-list (45)
        on left: 14 15
        on right: 12 13 15
    fun-declaration (46)
        on left: 16
        on right: 5
    type-specifier (47)
        on left: 17 18
        on right: 8 9 16 23 24
    params (48)
        on left: 19 20
        on right: 16
    param-list (49)
        on left: 21 22
        on right: 19 21
    param (50)
        on left: 23 24
        on right: 21 22
    compound-stmt (51)
        on left: 25
        on right: 16 33
    local-declarations (52)
        on left: 26 27 28 29
        on right: 25 26 27 28
    statement-list (53)
        on left: 30 31
        on right: 25 30
    statement (54)
        on left: 32 33 34 35 36
        on right: 30 39 40 41
    expression-stmt (55)
        on left: 37 38
        on right: 32
    selection-stmt (56)
        on left: 39 40
        on right: 34
    iteration-stmt (57)
        on left: 41
        on right: 35
    return-stmt (58)
        on left: 42 43
        on right: 36
    expression (59)
        on left: 44 45
        on right: 37 39 40 41 43 44 47 71 77 78
    var (60)
        on left: 46 47
        on right: 44 72
    simple-expression (61)
        on left: 48 49 50
        on right: 45 49
    relop (62)
        on left: 51 52 53 54 55 56
        on right: 48
    logop (63)
        on left: 57 58
        on right: 49
    additive-expression (64)
        on left: 59 60 61
        on right: 48 49 50 60 61
    term (65)
        on left: 62 63 64 65
        on right: 59 60 61 63 64
    unary-expression (66)
        on left: 66
        on right: 65
    unary_op (67)
        on left: 67 68 69
        on right: 66
    factor (68)
        on left: 70 71 72 73
        on right: 62 63 64 66
    call (69)
        on left: 74
        on right: 73
    args (70)
        on left: 75 76
        on right: 74
    args-list (71)
        on left: 77 78
        on right: 75 77


State 0

    0 $accept: . program $end

    INT   shift, and go to state 1
    VOID  shift, and go to state 2
    ENUM  shift, and go to state 3

    program            go to state 4
    declaration-list   go to state 5
    declaration        go to state 6
    var-declaration    go to state 7
    const-declaration  go to state 8
    enum-declaration   go to state 9
    fun-declaration    go to state 10
    type-specifier     go to state 11


State 1

   10 const-declaration: INT . CONST ID '=' NUM ';'
   17 type-specifier: INT .

    CONST  shift, and go to state 12

    $default  reduce using rule 17 (type-specifier)


State 2

   18 type-specifier: VOID .

    $default  reduce using rule 18 (type-specifier)


State 3

   11 enum-declaration: ENUM . ID ID ';'
   12                 | ENUM . ID '{' id-list '}' ';'
   13                 | ENUM . ID '{' id-list '}' ID ';'

    ID  shift, and go to state 13


State 4

    0 $accept: program . $end

    $end  shift, and go to state 14


State 5

    1 program: declaration-list .
    2 declaration-list: declaration-list . declaration

    INT   shift, and go to state 1
    VOID  shift, and go to state 2
    ENUM  shift, and go to state 3

    $default  reduce using rule 1 (program)

    declaration        go to state 15
    var-declaration    go to state 7
    const-declaration  go to state 8
    enum-declaration   go to state 9
    fun-declaration    go to state 10
    type-specifier     go to state 11


State 6

    3 declaration-list: declaration .

    $default  reduce using rule 3 (declaration-list)


State 7

    4 declaration: var-declaration .

    $default  reduce using rule 4 (declaration)


State 8

    6 declaration: const-declaration .

    $default  reduce using rule 6 (declaration)


State 9

    7 declaration: enum-declaration .

    $default  reduce using rule 7 (declaration)


State 10

    5 declaration: fun-declaration .

    $default  reduce using rule 5 (declaration)


State 11

    8 var-declaration: type-specifier . ID ';'
    9                | type-specifier . ID '[' NUM ']' ';'
   16 fun-declaration: type-specifier . ID '(' params ')' compound-stmt

    ID  shift, and go to state 16


State 12

   10 const-declaration: INT CONST . ID '=' NUM ';'

    ID  shift, and go to state 17


State 13

   11 enum-declaration: ENUM ID . ID ';'
   12                 | ENUM ID . '{' id-list '}' ';'
   13                 | ENUM ID . '{' id-list '}' ID ';'

    ID   shift, and go to state 18
    '{'  shift, and go to state 19


State 14

    0 $accept: program $end .

    $default  accept


State 15

    2 declaration-list: declaration-list declaration .

    $default  reduce using rule 2 (declaration-list)


State 16

    8 var-declaration: type-specifier ID . ';'
    9                | type-specifier ID . '[' NUM ']' ';'
   16 fun-declaration: type-specifier ID . '(' params ')' compound-stmt

    ';'  shift, and go to state 20
    '['  shift, and go to state 21
    '('  shift, and go to state 22


State 17

   10 const-declaration: INT CONST ID . '=' NUM ';'

    '='  shift, and go to state 23


State 18

   11 enum-declaration: ENUM ID ID . ';'

    ';'  shift, and go to state 24


State 19

   12 enum-declaration: ENUM ID '{' . id-list '}' ';'
   13                 | ENUM ID '{' . id-list '}' ID ';'

    ID  shift, and go to state 25

    id-list  go to state 26


State 20

    8 var-declaration: type-specifier ID ';' .

    $default  reduce using rule 8 (var-declaration)


State 21

    9 var-declaration: type-specifier ID '[' . NUM ']' ';'

    NUM  shift, and go to state 27


State 22

   16 fun-declaration: type-specifier ID '(' . params ')' compound-stmt

    INT   shift, and go to state 28
    VOID  shift, and go to state 29

    type-specifier  go to state 30
    params          go to state 31
    param-list      go to state 32
    param           go to state 33


State 23

   10 const-declaration: INT CONST ID '=' . NUM ';'

    NUM  shift, and go to state 34


State 24

   11 enum-declaration: ENUM ID ID ';' .

    $default  reduce using rule 11 (enum-declaration)


State 25

   14 id-list: ID .

    $default  reduce using rule 14 (id-list)


State 26

   12 enum-declaration: ENUM ID '{' id-list . '}' ';'
   13                 | ENUM ID '{' id-list . '}' ID ';'
   15 id-list: id-list . ',' ID

    '}'  shift, and go to state 35
    ','  shift, and go to state 36


State 27

    9 var-declaration: type-specifier ID '[' NUM . ']' ';'

    ']'  shift, and go to state 37


State 28

   17 type-specifier: INT .

    $default  reduce using rule 17 (type-specifier)


State 29

   18 type-specifier: VOID .
   20 params: VOID .

    ')'       reduce using rule 20 (params)
    $default  reduce using rule 18 (type-specifier)


State 30

   23 param: type-specifier . ID
   24      | type-specifier . ID '[' ']'

    ID  shift, and go to state 38


State 31

   16 fun-declaration: type-specifier ID '(' params . ')' compound-stmt

    ')'  shift, and go to state 39


State 32

   19 params: param-list .
   21 param-list: param-list . ',' param

    ','  shift, and go to state 40

    $default  reduce using rule 19 (params)


State 33

   22 param-list: param .

    $default  reduce using rule 22 (param-list)


State 34

   10 const-declaration: INT CONST ID '=' NUM . ';'

    ';'  shift, and go to state 41


State 35

   12 enum-declaration: ENUM ID '{' id-list '}' . ';'
   13                 | ENUM ID '{' id-list '}' . ID ';'

    ID   shift, and go to state 42
    ';'  shift, and go to state 43


State 36

   15 id-list: id-list ',' . ID

    ID  shift, and go to state 44


State 37

    9 var-declaration: type-specifier ID '[' NUM ']' . ';'

    ';'  shift, and go to state 45


State 38

   23 param: type-specifier ID .
   24      | type-specifier ID . '[' ']'

    '['  shift, and go to state 46

    $default  reduce using rule 23 (param)


State 39

   16 fun-declaration: type-specifier ID '(' params ')' . compound-stmt

    '{'  shift, and go to state 47

    compound-stmt  go to state 48


State 40

   21 param-list: param-list ',' . param

    INT   shift, and go to state 28
    VOID  shift, and go to state 2

    type-specifier  go to state 30
    param           go to state 49


State 41

   10 const-declaration: INT CONST ID '=' NUM ';' .

    $default  reduce using rule 10 (const-declaration)


State 42

   13 enum-declaration: ENUM ID '{' id-list '}' ID . ';'

    ';'  shift, and go to state 50


State 43

   12 enum-declaration: ENUM ID '{' id-list '}' ';' .

    $default  reduce using rule 12 (enum-declaration)


State 44

   15 id-list: id-list ',' ID .

    $default  reduce using rule 15 (id-list)


State 45

    9 var-declaration: type-specifier ID '[' NUM ']' ';' .

    $default  reduce using rule 9 (var-declaration)


State 46

   24 param: type-specifier ID '[' . ']'

    ']'  shift, and go to state 51


State 47

   25 compound-stmt: '{' . local-declarations statement-list '}'

    $default  reduce using rule 29 (local-declarations)

    local-declarations  go to state 52


State 48

   16 fun-declaration: type-specifier ID '(' params ')' compound-stmt .

    $default  reduce using rule 16 (fun-declaration)


State 49

   21 param-list: param-list ',' param .

    $default  reduce using rule 21 (param-list)


State 50

   13 enum-declaration: ENUM ID '{' id-list '}' ID ';' .

    $default  reduce using rule 13 (enum-declaration)


State 51

   24 param: type-specifier ID '[' ']' .

    $default  reduce using rule 24 (param)


State 52

   25 compound-stmt: '{' local-declarations . statement-list '}'
   26 local-declarations: local-declarations . var-declaration
   27                   | local-declarations . const-declaration
   28                   | local-declarations . enum-declaration

    INT   shift, and go to state 1
    VOID  shift, and go to state 2
    ENUM  shift, and go to state 3

    $default  reduce using rule 31 (statement-list)

    var-declaration    go to state 53
    const-declaration  go to state 54
    enum-declaration   go to state 55
    type-specifier     go to state 56
    statement-list     go to state 57


State 53

   26 local-declarations: local-declarations var-declaration .

    $default  reduce using rule 26 (local-declarations)


State 54

   27 local-declarations: local-declarations const-declaration .

    $default  reduce using rule 27 (local-declarations)


State 55

   28 local-declarations: local-declarations enum-declaration .

    $default  reduce using rule 28 (local-declarations)


State 56

    8 var-declaration: type-specifier . ID ';'
    9                | type-specifier . ID '[' NUM ']' ';'

    ID  shift, and go to state 58


State 57

   25 compound-stmt: '{' local-declarations statement-list . '}'
   30 statement-list: statement-list . statement

    NUM     shift, and go to state 59
    ID      shift, and go to state 60
    IF      shift, and go to state 61
    RETURN  shift, and go to state 62
    WHILE   shift, and go to state 63
    INC     shift, and go to state 64
    DEC     shift, and go to state 65
    ';'     shift, and go to state 66
    '{'     shift, and go to state 47
    '}'     shift, and go to state 67
    '('     shift, and go to state 68
    '!'     shift, and go to state 69

    compound-stmt        go to state 70
    statement            go to state 71
    expression-stmt      go to state 72
    selection-stmt       go to state 73
    iteration-stmt       go to state 74
    return-stmt          go to state 75
    expression           go to state 76
    var                  go to state 77
    simple-expression    go to state 78
    additive-expression  go to state 79
    term                 go to state 80
    unary-expression     go to state 81
    unary_op             go to state 82
    factor               go to state 83
    call                 go to state 84


State 58

    8 var-declaration: type-specifier ID . ';'
    9                | type-specifier ID . '[' NUM ']' ';'

    ';'  shift, and go to state 20
    '['  shift, and go to state 21


State 59

   70 factor: NUM .

    $default  reduce using rule 70 (factor)


State 60

   46 var: ID .
   47    | ID . '[' expression ']'
   74 call: ID . '(' args ')'

    '['  shift, and go to state 85
    '('  shift, and go to state 86

    $default  reduce using rule 46 (var)


State 61

   39 selection-stmt: IF . '(' expression ')' statement
   40               | IF . '(' expression ')' statement ELSE statement

    '('  shift, and go to state 87


State 62

   42 return-stmt: RETURN . ';'
   43            | RETURN . expression ';'

    NUM  shift, and go to state 59
    ID   shift, and go to state 60
    INC  shift, and go to state 64
    DEC  shift, and go to state 65
    ';'  shift, and go to state 88
    '('  shift, and go to state 68
    '!'  shift, and go to state 69

    expression           go to state 89
    var                  go to state 77
    simple-expression    go to state 78
    additive-expression  go to state 79
    term                 go to state 80
    unary-expression     go to state 81
    unary_op             go to state 82
    factor               go to state 83
    call                 go to state 84


State 63

   41 iteration-stmt: WHILE . '(' expression ')' statement

    '('  shift, and go to state 90


State 64

   69 unary_op: INC .

    $default  reduce using rule 69 (unary_op)


State 65

   68 unary_op: DEC .

    $default  reduce using rule 68 (unary_op)


State 66

   38 expression-stmt: ';' .

    $default  reduce using rule 38 (expression-stmt)


State 67

   25 compound-stmt: '{' local-declarations statement-list '}' .

    $default  reduce using rule 25 (compound-stmt)


State 68

   71 factor: '(' . expression ')'

    NUM  shift, and go to state 59
    ID   shift, and go to state 60
    INC  shift, and go to state 64
    DEC  shift, and go to state 65
    '('  shift, and go to state 68
    '!'  shift, and go to state 69

    expression           go to state 91
    var                  go to state 77
    simple-expression    go to state 78
    additive-expression  go to state 79
    term                 go to state 80
    unary-expression     go to state 81
    unary_op             go to state 82
    factor               go to state 83
    call                 go to state 84


State 69

   67 unary_op: '!' .

    $default  reduce using rule 67 (unary_op)


State 70

   33 statement: compound-stmt .

    $default  reduce using rule 33 (statement)


State 71

   30 statement-list: statement-list statement .

    $default  reduce using rule 30 (statement-list)


State 72

   32 statement: expression-stmt .

    $default  reduce using rule 32 (statement)


State 73

   34 statement: selection-stmt .

    $default  reduce using rule 34 (statement)


State 74

   35 statement: iteration-stmt .

    $default  reduce using rule 35 (statement)


State 75

   36 statement: return-stmt .

    $default  reduce using rule 36 (statement)


State 76

   37 expression-stmt: expression . ';'

    ';'  shift, and go to state 92


State 77

   44 expression: var . '=' expression
   72 factor: var .

    '='  shift, and go to state 93

    $default  reduce using rule 72 (factor)


State 78

   45 expression: simple-expression .
   49 simple-expression: simple-expression . logop additive-expression

    AND  shift, and go to state 94
    OR   shift, and go to state 95

    $default  reduce using rule 45 (expression)

    logop  go to state 96


State 79

   48 simple-expression: additive-expression . relop additive-expression
   50                  | additive-expression .
   60 additive-expression: additive-expression . '+' term
   61                    | additive-expression . '-' term

    EQ    shift, and go to state 97
    NEQ   shift, and go to state 98
    LT    shift, and go to state 99
    GT    shift, and go to state 100
    LTEQ  shift, and go to state 101
    GTEQ  shift, and go to state 102
    '+'   shift, and go to state 103
    '-'   shift, and go to state 104

    $default  reduce using rule 50 (simple-expression)

    relop  go to state 105


State 80

   59 additive-expression: term .
   63 term: term . '*' factor
   64     | term . '/' factor

    '*'  shift, and go to state 106
    '/'  shift, and go to state 107

    $default  reduce using rule 59 (additive-expression)


State 81

   65 term: unary-expression .

    $default  reduce using rule 65 (term)


State 82

   66 unary-expression: unary_op . factor

    NUM  shift, and go to state 59
    ID   shift, and go to state 60
    '('  shift, and go to state 68

    var     go to state 108
    factor  go to state 109
    call    go to state 84


State 83

   62 term: factor .

    $default  reduce using rule 62 (term)


State 84

   73 factor: call .

    $default  reduce using rule 73 (factor)


State 85

   47 var: ID '[' . expression ']'

    NUM  shift, and go to state 59
    ID   shift, and go to state 60
    INC  shift, and go to state 64
    DEC  shift, and go to state 65
    '('  shift, and go to state 68
    '!'  shift, and go to state 69

    expression           go to state 110
    var                  go to state 77
    simple-expression    go to state 78
    additive-expression  go to state 79
    term                 go to state 80
    unary-expression     go to state 81
    unary_op             go to state 82
    factor               go to state 83
    call                 go to state 84


State 86

   74 call: ID '(' . args ')'

    NUM  shift, and go to state 59
    ID   shift, and go to state 60
    INC  shift, and go to state 64
    DEC  shift, and go to state 65
    '('  shift, and go to state 68
    '!'  shift, and go to state 69

    $default  reduce using rule 76 (args)

    expression           go to state 111
    var                  go to state 77
    simple-expression    go to state 78
    additive-expression  go to state 79
    term                 go to state 80
    unary-expression     go to state 81
    unary_op             go to state 82
    factor               go to state 83
    call                 go to state 84
    args                 go to state 112
    args-list            go to state 113


State 87

   39 selection-stmt: IF '(' . expression ')' statement
   40               | IF '(' . expression ')' statement ELSE statement

    NUM  shift, and go to state 59
    ID   shift, and go to state 60
    INC  shift, and go to state 64
    DEC  shift, and go to state 65
    '('  shift, and go to state 68
    '!'  shift, and go to state 69

    expression           go to state 114
    var                  go to state 77
    simple-expression    go to state 78
    additive-expression  go to state 79
    term                 go to state 80
    unary-expression     go to state 81
    unary_op             go to state 82
    factor               go to state 83
    call                 go to state 84


State 88

   42 return-stmt: RETURN ';' .

    $default  reduce using rule 42 (return-stmt)


State 89

   43 return-stmt: RETURN expression . ';'

    ';'  shift, and go to state 115


State 90

   41 iteration-stmt: WHILE '(' . expression ')' statement

    NUM  shift, and go to state 59
    ID   shift, and go to state 60
    INC  shift, and go to state 64
    DEC  shift, and go to state 65
    '('  shift, and go to state 68
    '!'  shift, and go to state 69

    expression           go to state 116
    var                  go to state 77
    simple-expression    go to state 78
    additive-expression  go to state 79
    term                 go to state 80
    unary-expression     go to state 81
    unary_op             go to state 82
    factor               go to state 83
    call                 go to state 84


State 91

   71 factor: '(' expression . ')'

    ')'  shift, and go to state 117


State 92

   37 expression-stmt: expression ';' .

    $default  reduce using rule 37 (expression-stmt)


State 93

   44 expression: var '=' . expression

    NUM  shift, and go to state 59
    ID   shift, and go to state 60
    INC  shift, and go to state 64
    DEC  shift, and go to state 65
    '('  shift, and go to state 68
    '!'  shift, and go to state 69

    expression           go to state 118
    var                  go to state 77
    simple-expression    go to state 78
    additive-expression  go to state 79
    term                 go to state 80
    unary-expression     go to state 81
    unary_op             go to state 82
    factor               go to state 83
    call                 go to state 84


State 94

   57 logop: AND .

    $default  reduce using rule 57 (logop)


State 95

   58 logop: OR .

    $default  reduce using rule 58 (logop)


State 96

   49 simple-expression: simple-expression logop . additive-expression

    NUM  shift, and go to state 59
    ID   shift, and go to state 60
    INC  shift, and go to state 64
    DEC  shift, and go to state 65
    '('  shift, and go to state 68
    '!'  shift, and go to state 69

    var                  go to state 108
    additive-expression  go to state 119
    term                 go to state 80
    unary-expression     go to state 81
    unary_op             go to state 82
    factor               go to state 83
    call                 go to state 84


State 97

   55 relop: EQ .

    $default  reduce using rule 55 (relop)


State 98

   56 relop: NEQ .

    $default  reduce using rule 56 (relop)


State 99

   52 relop: LT .

    $default  reduce using rule 52 (relop)


State 100

   53 relop: GT .

    $default  reduce using rule 53 (relop)


State 101

   51 relop: LTEQ .

    $default  reduce using rule 51 (relop)


State 102

   54 relop: GTEQ .

    $default  reduce using rule 54 (relop)


State 103

   60 additive-expression: additive-expression '+' . term

    NUM  shift, and go to state 59
    ID   shift, and go to state 60
    INC  shift, and go to state 64
    DEC  shift, and go to state 65
    '('  shift, and go to state 68
    '!'  shift, and go to state 69

    var               go to state 108
    term              go to state 120
    unary-expression  go to state 81
    unary_op          go to state 82
    factor            go to state 83
    call              go to state 84


State 104

   61 additive-expression: additive-expression '-' . term

    NUM  shift, and go to state 59
    ID   shift, and go to state 60
    INC  shift, and go to state 64
    DEC  shift, and go to state 65
    '('  shift, and go to state 68
    '!'  shift, and go to state 69

    var               go to state 108
    term              go to state 121
    unary-expression  go to state 81
    unary_op          go to state 82
    factor            go to state 83
    call              go to state 84


State 105

   48 simple-expression: additive-expression relop . additive-expression

    NUM  shift, and go to state 59
    ID   shift, and go to state 60
    INC  shift, and go to state 64
    DEC  shift, and go to state 65
    '('  shift, and go to state 68
    '!'  shift, and go to state 69

    var                  go to state 108
    additive-expression  go to state 122
    term                 go to state 80
    unary-expression     go to state 81
    unary_op             go to state 82
    factor               go to state 83
    call                 go to state 84


State 106

   63 term: term '*' . factor

    NUM  shift, and go to state 59
    ID   shift, and go to state 60
    '('  shift, and go to state 68

    var     go to state 108
    factor  go to state 123
    call    go to state 84


State 107

   64 term: term '/' . factor

    NUM  shift, and go to state 59
    ID   shift, and go to state 60
    '('  shift, and go to state 68

    var     go to state 108
    factor  go to state 124
    call    go to state 84


State 108

   72 factor: var .

    $default  reduce using rule 72 (factor)


State 109

   66 unary-expression: unary_op factor .

    $default  reduce using rule 66 (unary-expression)


State 110

   47 var: ID '[' expression . ']'

    ']'  shift, and go to state 125


State 111

   78 args-list: expression .

    $default  reduce using rule 78 (args-list)


State 112

   74 call: ID '(' args . ')'

    ')'  shift, and go to state 126


State 113

   75 args: args-list .
   77 args-list: args-list . ',' expression

    ','  shift, and go to state 127

    $default  reduce using rule 75 (args)


State 114

   39 selection-stmt: IF '(' expression . ')' statement
   40               | IF '(' expression . ')' statement ELSE statement

    ')'  shift, and go to state 128


State 115

   43 return-stmt: RETURN expression ';' .

    $default  reduce using rule 43 (return-stmt)


State 116

   41 iteration-stmt: WHILE '(' expression . ')' statement

    ')'  shift, and go to state 129


State 117

   71 factor: '(' expression ')' .

    $default  reduce using rule 71 (factor)


State 118

   44 expression: var '=' expression .

    $default  reduce using rule 44 (expression)


State 119

   49 simple-expression: simple-expression logop additive-expression .
   60 additive-expression: additive-expression . '+' term
   61                    | additive-expression . '-' term

    '+'  shift, and go to state 103
    '-'  shift, and go to state 104

    $default  reduce using rule 49 (simple-expression)


State 120

   60 additive-expression: additive-expression '+' term .
   63 term: term . '*' factor
   64     | term . '/' factor

    '*'  shift, and go to state 106
    '/'  shift, and go to state 107

    $default  reduce using rule 60 (additive-expression)


State 121

   61 additive-expression: additive-expression '-' term .
   63 term: term . '*' factor
   64     | term . '/' factor

    '*'  shift, and go to state 106
    '/'  shift, and go to state 107

    $default  reduce using rule 61 (additive-expression)


State 122

   48 simple-expression: additive-expression relop additive-expression .
   60 additive-expression: additive-expression . '+' term
   61                    | additive-expression . '-' term

    '+'  shift, and go to state 103
    '-'  shift, and go to state 104

    $default  reduce using rule 48 (simple-expression)


State 123

   63 term: term '*' factor .

    $default  reduce using rule 63 (term)


State 124

   64 term: term '/' factor .

    $default  reduce using rule 64 (term)


State 125

   47 var: ID '[' expression ']' .

    $default  reduce using rule 47 (var)


State 126

   74 call: ID '(' args ')' .

    $default  reduce using rule 74 (call)


State 127

   77 args-list: args-list ',' . expression

    NUM  shift, and go to state 59
    ID   shift, and go to state 60
    INC  shift, and go to state 64
    DEC  shift, and go to state 65
    '('  shift, and go to state 68
    '!'  shift, and go to state 69

    expression           go to state 130
    var                  go to state 77
    simple-expression    go to state 78
    additive-expression  go to state 79
    term                 go to state 80
    unary-expression     go to state 81
    unary_op             go to state 82
    factor               go to state 83
    call                 go to state 84


State 128

   39 selection-stmt: IF '(' expression ')' . statement
   40               | IF '(' expression ')' . statement ELSE statement

    NUM     shift, and go to state 59
    ID      shift, and go to state 60
    IF      shift, and go to state 61
    RETURN  shift, and go to state 62
    WHILE   shift, and go to state 63
    INC     shift, and go to state 64
    DEC     shift, and go to state 65
    ';'     shift, and go to state 66
    '{'     shift, and go to state 47
    '('     shift, and go to state 68
    '!'     shift, and go to state 69

    compound-stmt        go to state 70
    statement            go to state 131
    expression-stmt      go to state 72
    selection-stmt       go to state 73
    iteration-stmt       go to state 74
    return-stmt          go to state 75
    expression           go to state 76
    var                  go to state 77
    simple-expression    go to state 78
    additive-expression  go to state 79
    term                 go to state 80
    unary-expression     go to state 81
    unary_op             go to state 82
    factor               go to state 83
    call                 go to state 84


State 129

   41 iteration-stmt: WHILE '(' expression ')' . statement

    NUM     shift, and go to state 59
    ID      shift, and go to state 60
    IF      shift, and go to state 61
    RETURN  shift, and go to state 62
    WHILE   shift, and go to state 63
    INC     shift, and go to state 64
    DEC     shift, and go to state 65
    ';'     shift, and go to state 66
    '{'     shift, and go to state 47
    '('     shift, and go to state 68
    '!'     shift, and go to state 69

    compound-stmt        go to state 70
    statement            go to state 132
    expression-stmt      go to state 72
    selection-stmt       go to state 73
    iteration-stmt       go to state 74
    return-stmt          go to state 75
    expression           go to state 76
    var                  go to state 77
    simple-expression    go to state 78
    additive-expression  go to state 79
    term                 go to state 80
    unary-expression     go to state 81
    unary_op             go to state 82
    factor               go to state 83
    call                 go to state 84


State 130

   77 args-list: args-list ',' expression .

    $default  reduce using rule 77 (args-list)


State 131

   39 selection-stmt: IF '(' expression ')' statement .
   40               | IF '(' expression ')' statement . ELSE statement

    ELSE  shift, and go to state 133

    ELSE      [reduce using rule 39 (selection-stmt)]
    $default  reduce using rule 39 (selection-stmt)


State 132

   41 iteration-stmt: WHILE '(' expression ')' statement .

    $default  reduce using rule 41 (iteration-stmt)


State 133

   40 selection-stmt: IF '(' expression ')' statement ELSE . statement

    NUM     shift, and go to state 59
    ID      shift, and go to state 60
    IF      shift, and go to state 61
    RETURN  shift, and go to state 62
    WHILE   shift, and go to state 63
    INC     shift, and go to state 64
    DEC     shift, and go to state 65
    ';'     shift, and go to state 66
    '{'     shift, and go to state 47
    '('     shift, and go to state 68
    '!'     shift, and go to state 69

    compound-stmt        go to state 70
    statement            go to state 134
    expression-stmt      go to state 72
    selection-stmt       go to state 73
    iteration-stmt       go to state 74
    return-stmt          go to state 75
    expression           go to state 76
    var                  go to state 77
    simple-expression    go to state 78
    additive-expression  go to state 79
    term                 go to state 80
    unary-expression     go to state 81
    unary_op             go to state 82
    factor               go to state 83
    call                 go to state 84


State 134

   40 selection-stmt: IF '(' expression ')' statement ELSE statement .

    $default  reduce using rule 40 (selection-stmt)
