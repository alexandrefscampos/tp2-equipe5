Terminals unused in grammar

    ERROR


State 132 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: declaration-list

    2 declaration-list: declaration
    3                 | declaration-list declaration

    4 declaration: var-declaration
    5            | fun-declaration
    6            | const-declaration
    7            | enum-declaration

    8 var-declaration: type-specifier type_ID ';'
    9                | type-specifier type_ID '[' type_NUM ']' ';'

   10 const-declaration: INT CONST type_ID '=' type_NUM ';'

   11 enum-declaration: ENUM type_ID type_ID ';'
   12                 | ENUM type_ID '{' id-list '}' ';'
   13                 | ENUM type_ID '{' id-list '}' type_ID ';'

   14 id-list: type_ID
   15        | id-list ',' type_ID

   16 fun-declaration: type-specifier type_ID '(' params ')' compound-stmt

   17 params: param-list
   18       | VOID

   19 param-list: param-list ',' param
   20           | param

   21 param: type-specifier type_ID
   22      | type-specifier type_ID '[' ']'

   23 param: type-specifier type_ID
   24      | type-specifier type_ID '[' ']'

   24 local-declarations: local-declarations var-declaration
   25                   | local-declarations const-declaration
   26                   | local-declarations enum-declaration
   27                   | %empty

   28 statement-list: statement-list statement
   29               | %empty

   30 statement: expression-stmt
   31          | compound-stmt
   32          | selection-stmt
   33          | iteration-stmt
   34          | return-stmt

   35 expression-stmt: expression ';'
   36                | ';'

   37 selection-stmt: IF '(' expression ')' statement
   38               | IF '(' expression ')' statement ELSE statement

   39 iteration-stmt: WHILE '(' expression ')' statement

   40 return-stmt: RETURN ';'
   41            | RETURN expression ';'

   42 expression: var '=' expression
   43           | simple-expression

   44 var: type_ID
   45    | type_ID '[' expression ']'

   46 var: type_ID
   47    | type_ID '[' expression ']'

   49 relop: LTEQ
   50      | LT
   51      | GT
   52      | GTEQ
   53      | EQ
   54      | NEQ

   55 logop: AND
   56      | OR

   57 additive-expression: term
   58                    | additive-expression '+' term
   59                    | additive-expression '-' term

   60 term: factor
   61     | term '*' factor
   62     | term '/' factor
   63     | unary-expression

   64 unary-expression: unary_op factor

   65 unary_op: '!'
   66         | DEC
   67         | INC

   68 factor: type_NUM
   69       | '(' expression ')'
   70       | var
   71       | call

   70 factor: type_NUM
   71       | '(' expression ')'
   72       | var
   73       | call

   74 call: type_ID '(' args ')'

   75 args-list: expression
   76          | args-list ',' expression

   77 type_NUM: NUM

   79 type_NUM: NUM

   80 type_ID: ID


Terminals, with rules where they appear

    $end (0) 0
    '!' (33) 65
    '(' (40) 14 37 38 39 69 72
    ')' (41) 14 37 38 39 69 72
    '*' (42) 61
    '+' (43) 58
    ',' (44) 19 76
    '-' (45) 59
    '/' (47) 62
    ';' (59) 8 9 10 11 12 13 35 36 40 41
    '=' (61) 10 42
    '[' (91) 9 22 45
    ']' (93) 9 22 45
    '{' (123) 12 13 23
    '}' (125) 12 13 23
    error (256)
    NUM (258) 79
    ID (259) 80
    ELSE (260) 40
    IF (261) 39 40
    INT (262) 10 17
    RETURN (263) 42 43
    VOID (264) 18 20
    WHILE (265) 41
    EQ (266) 55
    NEQ (267) 56
    LT (268) 52
    GT (269) 53
    LTEQ (270) 51
    GTEQ (271) 54
    ERROR (272)
    CONST (273) 10
    ENUM (274) 11 12 13
    AND (275) 55
    OR (276) 56
    INC (277) 67
    DEC (278) 66


Nonterminals, with rules where they appear

    $accept (38)
        on left: 0
    program (39)
        on left: 1
        on right: 0
    declaration-list <decl> (40)
        on left: 2 3
        on right: 1 3
    declaration <decl> (41)
        on left: 4 5 6 7
        on right: 2 3
    var-declaration <decl> (42)
        on left: 8 9
        on right: 4 24
    const-declaration <decl> (43)
        on left: 10
        on right: 6 25
    enum-declaration <decl> (44)
        on left: 11 12 13
        on right: 7 26
    fun-declaration <decl> (45)
        on left: 14
        on right: 5
    type-specifier <type> (46)
        on left: 15 16
        on right: 8 9 14 21 22
    params <param_list> (47)
        on left: 17 18
        on right: 14
    param-list <param_list> (48)
        on left: 19 20
        on right: 12 13 17 19
    param <param_list> (49)
        on left: 21 22
        on right: 19 20
    compound-stmt <stmt> (50)
        on left: 23
        on right: 14 31
    local-declarations <decl> (51)
        on left: 24 25 26 27
        on right: 23 24 25 26
    statement-list <stmt> (52)
        on left: 28 29
        on right: 23 28
    statement <stmt> (53)
        on left: 30 31 32 33 34
        on right: 28 37 38 39
    expression-stmt <stmt> (54)
        on left: 35 36
        on right: 30
    selection-stmt <stmt> (55)
        on left: 37 38
        on right: 32
    iteration-stmt <stmt> (56)
        on left: 39
        on right: 33
    return-stmt <stmt> (57)
        on left: 40 41
        on right: 34
    expression <expr> (58)
        on left: 42 43
        on right: 35 37 38 39 41 42 45 69 75 76
    var <expr> (59)
        on left: 44 45
        on right: 42 70
    simple-expression <expr> (60)
        on left: 46 47 48
        on right: 43 47
    relop <expr> (61)
        on left: 49 50 51 52 53 54
        on right: 46
    logop <expr> (62)
        on left: 55 56
        on right: 47
    additive-expression <expr> (63)
        on left: 57 58 59
        on right: 46 47 48 58 59
    term <expr> (64)
        on left: 60 61 62 63
        on right: 57 58 59 61 62
    unary-expression <expr> (65)
        on left: 64
        on right: 63
    unary_op <expr> (66)
        on left: 65 66 67
        on right: 64
    factor <expr> (67)
        on left: 68 69 70 71
        on right: 60 61 62 64
    call <expr> (68)
        on left: 72
        on right: 71
    args <expr> (69)
        on left: 73 74
        on right: 72
    args-list <expr> (70)
        on left: 75 76
<<<<<<< HEAD
        on right: 73 76
    type_NUM <num> (71)
        on left: 77
        on right: 9 10 68
    type_ID <id> (72)
        on left: 78
        on right: 8 9 10 11 12 13 14 21 22 44 45 72
=======
        on right: 74
    args-list <expr> (71)
        on left: 77 78
        on right: 75 77
    type_NUM <num> (72)
        on left: 79
        on right: 9 10 70
    type_ID <id> (73)
        on left: 80
        on right: 8 9 10 11 12 13 14 15 16 23 24 46 47 74
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be


State 0

    0 $accept: . program $end

    INT   shift, and go to state 1
    VOID  shift, and go to state 2
    ENUM  shift, and go to state 3

    program            go to state 4
    declaration-list   go to state 5
    declaration        go to state 6
    var-declaration    go to state 7
    const-declaration  go to state 8
    enum-declaration   go to state 9
    fun-declaration    go to state 10
    type-specifier     go to state 11


State 1

   10 const-declaration: INT . CONST type_ID '=' type_NUM ';'
<<<<<<< HEAD
   15 type-specifier: INT .
=======
   17 type-specifier: INT .
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be

    CONST  shift, and go to state 12

    $default  reduce using rule 15 (type-specifier)


State 2

   16 type-specifier: VOID .

    $default  reduce using rule 16 (type-specifier)


State 3

   11 enum-declaration: ENUM . type_ID type_ID ';'
<<<<<<< HEAD
   12                 | ENUM . type_ID '{' param-list '}' ';'
   13                 | ENUM . type_ID '{' param-list '}' type_ID ';'
=======
   12                 | ENUM . type_ID '{' id-list '}' ';'
   13                 | ENUM . type_ID '{' id-list '}' type_ID ';'
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be

    ID  shift, and go to state 13

    type_ID  go to state 14


State 4

    0 $accept: program . $end

    $end  shift, and go to state 15


State 5

    1 program: declaration-list .
    3 declaration-list: declaration-list . declaration

    INT   shift, and go to state 1
    VOID  shift, and go to state 2
    ENUM  shift, and go to state 3

    $default  reduce using rule 1 (program)

    declaration        go to state 16
    var-declaration    go to state 7
    const-declaration  go to state 8
    enum-declaration   go to state 9
    fun-declaration    go to state 10
    type-specifier     go to state 11


State 6

    2 declaration-list: declaration .

    $default  reduce using rule 2 (declaration-list)


State 7

    4 declaration: var-declaration .

    $default  reduce using rule 4 (declaration)


State 8

    6 declaration: const-declaration .

    $default  reduce using rule 6 (declaration)


State 9

    7 declaration: enum-declaration .

    $default  reduce using rule 7 (declaration)


State 10

    5 declaration: fun-declaration .

    $default  reduce using rule 5 (declaration)


State 11

    8 var-declaration: type-specifier . type_ID ';'
    9                | type-specifier . type_ID '[' type_NUM ']' ';'
<<<<<<< HEAD
   14 fun-declaration: type-specifier . type_ID '(' params ')' compound-stmt
=======
   16 fun-declaration: type-specifier . type_ID '(' params ')' compound-stmt
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be

    ID  shift, and go to state 13

    type_ID  go to state 17


State 12

   10 const-declaration: INT CONST . type_ID '=' type_NUM ';'
<<<<<<< HEAD

    ID  shift, and go to state 13

=======

    ID  shift, and go to state 13

>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be
    type_ID  go to state 18


State 13

<<<<<<< HEAD
   78 type_ID: ID .

    $default  reduce using rule 78 (type_ID)
=======
   80 type_ID: ID .

    $default  reduce using rule 80 (type_ID)
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be


State 14

   11 enum-declaration: ENUM type_ID . type_ID ';'
<<<<<<< HEAD
   12                 | ENUM type_ID . '{' param-list '}' ';'
   13                 | ENUM type_ID . '{' param-list '}' type_ID ';'
=======
   12                 | ENUM type_ID . '{' id-list '}' ';'
   13                 | ENUM type_ID . '{' id-list '}' type_ID ';'
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be

    ID   shift, and go to state 13
    '{'  shift, and go to state 19

    type_ID  go to state 20


State 15

    0 $accept: program $end .

    $default  accept


State 16

    3 declaration-list: declaration-list declaration .

    $default  reduce using rule 3 (declaration-list)


State 17

    8 var-declaration: type-specifier type_ID . ';'
    9                | type-specifier type_ID . '[' type_NUM ']' ';'
<<<<<<< HEAD
   14 fun-declaration: type-specifier type_ID . '(' params ')' compound-stmt
=======
   16 fun-declaration: type-specifier type_ID . '(' params ')' compound-stmt
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be

    ';'  shift, and go to state 21
    '['  shift, and go to state 22
    '('  shift, and go to state 23


State 18

   10 const-declaration: INT CONST type_ID . '=' type_NUM ';'

    '='  shift, and go to state 24


State 19

<<<<<<< HEAD
   12 enum-declaration: ENUM type_ID '{' . param-list '}' ';'
   13                 | ENUM type_ID '{' . param-list '}' type_ID ';'

    INT   shift, and go to state 25
    VOID  shift, and go to state 2

    type-specifier  go to state 26
    param-list      go to state 27
    param           go to state 28
=======
   12 enum-declaration: ENUM type_ID '{' . id-list '}' ';'
   13                 | ENUM type_ID '{' . id-list '}' type_ID ';'

    ID  shift, and go to state 13

    id-list  go to state 25
    type_ID  go to state 26
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be


State 20

   11 enum-declaration: ENUM type_ID type_ID . ';'

<<<<<<< HEAD
    ';'  shift, and go to state 29
=======
    ';'  shift, and go to state 27
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be


State 21

    8 var-declaration: type-specifier type_ID ';' .

    $default  reduce using rule 8 (var-declaration)


State 22

    9 var-declaration: type-specifier type_ID '[' . type_NUM ']' ';'

<<<<<<< HEAD
    NUM  shift, and go to state 30

    type_NUM  go to state 31
=======
    NUM  shift, and go to state 28

    type_NUM  go to state 29
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be


State 23

<<<<<<< HEAD
   14 fun-declaration: type-specifier type_ID '(' . params ')' compound-stmt

    INT   shift, and go to state 25
    VOID  shift, and go to state 32

    type-specifier  go to state 26
    params          go to state 33
    param-list      go to state 34
    param           go to state 28
=======
   16 fun-declaration: type-specifier type_ID '(' . params ')' compound-stmt

    INT   shift, and go to state 30
    VOID  shift, and go to state 31

    type-specifier  go to state 32
    params          go to state 33
    param-list      go to state 34
    param           go to state 35
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be


State 24

   10 const-declaration: INT CONST type_ID '=' . type_NUM ';'

<<<<<<< HEAD
    NUM  shift, and go to state 30

    type_NUM  go to state 35
=======
    NUM  shift, and go to state 28

    type_NUM  go to state 36
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be


State 25

<<<<<<< HEAD
   15 type-specifier: INT .

    $default  reduce using rule 15 (type-specifier)
=======
   12 enum-declaration: ENUM type_ID '{' id-list . '}' ';'
   13                 | ENUM type_ID '{' id-list . '}' type_ID ';'
   15 id-list: id-list . ',' type_ID

    '}'  shift, and go to state 37
    ','  shift, and go to state 38
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be


State 26

<<<<<<< HEAD
   21 param: type-specifier . type_ID
   22      | type-specifier . type_ID '[' ']'
=======
   14 id-list: type_ID .
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be

    ID  shift, and go to state 13

    type_ID  go to state 36


State 27

<<<<<<< HEAD
   12 enum-declaration: ENUM type_ID '{' param-list . '}' ';'
   13                 | ENUM type_ID '{' param-list . '}' type_ID ';'
   19 param-list: param-list . ',' param

    '}'  shift, and go to state 37
    ','  shift, and go to state 38
=======
   11 enum-declaration: ENUM type_ID type_ID ';' .

    $default  reduce using rule 11 (enum-declaration)
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be


State 28

<<<<<<< HEAD
   20 param-list: param .

    $default  reduce using rule 20 (param-list)
=======
   79 type_NUM: NUM .

    $default  reduce using rule 79 (type_NUM)
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be


State 29

<<<<<<< HEAD
   11 enum-declaration: ENUM type_ID type_ID ';' .
=======
    9 var-declaration: type-specifier type_ID '[' type_NUM . ']' ';'

    ']'  shift, and go to state 39


State 30

   17 type-specifier: INT .
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be

    $default  reduce using rule 11 (enum-declaration)


State 31

   77 type_NUM: NUM .

    $default  reduce using rule 77 (type_NUM)


State 32

<<<<<<< HEAD
    9 var-declaration: type-specifier type_ID '[' type_NUM . ']' ';'

    ']'  shift, and go to state 39
=======
   23 param: type-specifier . type_ID
   24      | type-specifier . type_ID '[' ']'

    ID  shift, and go to state 13
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be

    type_ID  go to state 40


<<<<<<< HEAD
   16 type-specifier: VOID .
   18 params: VOID .

    ')'       reduce using rule 18 (params)
    $default  reduce using rule 16 (type-specifier)
=======
State 33

   16 fun-declaration: type-specifier type_ID '(' params . ')' compound-stmt
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be

    ')'  shift, and go to state 41


State 34

<<<<<<< HEAD
   14 fun-declaration: type-specifier type_ID '(' params . ')' compound-stmt
=======
   19 params: param-list .
   21 param-list: param-list . ',' param

    ','  shift, and go to state 42
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be

    ')'  shift, and go to state 40


State 35

   17 params: param-list .
   19 param-list: param-list . ',' param

    ','  shift, and go to state 38

    $default  reduce using rule 17 (params)


<<<<<<< HEAD
State 35

   10 const-declaration: INT CONST type_ID '=' type_NUM . ';'

    ';'  shift, and go to state 41


State 36

   21 param: type-specifier type_ID .
   22      | type-specifier type_ID . '[' ']'

    '['  shift, and go to state 42

    $default  reduce using rule 21 (param)
=======
State 36

   10 const-declaration: INT CONST type_ID '=' type_NUM . ';'

    ';'  shift, and go to state 43
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be


State 37

<<<<<<< HEAD
   12 enum-declaration: ENUM type_ID '{' param-list '}' . ';'
   13                 | ENUM type_ID '{' param-list '}' . type_ID ';'

    ID   shift, and go to state 13
    ';'  shift, and go to state 43

    type_ID  go to state 44
=======
   12 enum-declaration: ENUM type_ID '{' id-list '}' . ';'
   13                 | ENUM type_ID '{' id-list '}' . type_ID ';'

    ID   shift, and go to state 13
    ';'  shift, and go to state 44

    type_ID  go to state 45
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be


State 38

<<<<<<< HEAD
   19 param-list: param-list ',' . param

    INT   shift, and go to state 25
    VOID  shift, and go to state 2

    type-specifier  go to state 26
    param           go to state 45
=======
   15 id-list: id-list ',' . type_ID

    ID  shift, and go to state 13

    type_ID  go to state 46
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be


State 39

    9 var-declaration: type-specifier type_ID '[' type_NUM ']' . ';'

<<<<<<< HEAD
    ';'  shift, and go to state 46
=======
    ';'  shift, and go to state 47
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be


State 40

<<<<<<< HEAD
   14 fun-declaration: type-specifier type_ID '(' params ')' . compound-stmt

    '{'  shift, and go to state 47

    compound-stmt  go to state 48
=======
   23 param: type-specifier type_ID .
   24      | type-specifier type_ID . '[' ']'

    '['  shift, and go to state 48

    $default  reduce using rule 23 (param)
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be


State 41

<<<<<<< HEAD
   10 const-declaration: INT CONST type_ID '=' type_NUM ';' .

    $default  reduce using rule 10 (const-declaration)
=======
   16 fun-declaration: type-specifier type_ID '(' params ')' . compound-stmt

    '{'  shift, and go to state 49

    compound-stmt  go to state 50
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be


State 42

<<<<<<< HEAD
   22 param: type-specifier type_ID '[' . ']'

    ']'  shift, and go to state 49
=======
   21 param-list: param-list ',' . param

    INT   shift, and go to state 30
    VOID  shift, and go to state 2

    type-specifier  go to state 32
    param           go to state 51
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be


State 43

<<<<<<< HEAD
   12 enum-declaration: ENUM type_ID '{' param-list '}' ';' .

    $default  reduce using rule 12 (enum-declaration)
=======
   10 const-declaration: INT CONST type_ID '=' type_NUM ';' .

    $default  reduce using rule 10 (const-declaration)
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be


State 44

<<<<<<< HEAD
   13 enum-declaration: ENUM type_ID '{' param-list '}' type_ID . ';'
=======
   12 enum-declaration: ENUM type_ID '{' id-list '}' ';' .
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be

    ';'  shift, and go to state 50


State 45

<<<<<<< HEAD
   19 param-list: param-list ',' param .

    $default  reduce using rule 19 (param-list)
=======
   13 enum-declaration: ENUM type_ID '{' id-list '}' type_ID . ';'

    ';'  shift, and go to state 52
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be


State 46

<<<<<<< HEAD
    9 var-declaration: type-specifier type_ID '[' type_NUM ']' ';' .
=======
   15 id-list: id-list ',' type_ID .
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be

    $default  reduce using rule 15 (id-list)


State 47

<<<<<<< HEAD
   23 compound-stmt: '{' . local-declarations statement-list '}'

    $default  reduce using rule 27 (local-declarations)
=======
    9 var-declaration: type-specifier type_ID '[' type_NUM ']' ';' .

    $default  reduce using rule 9 (var-declaration)
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be

    local-declarations  go to state 51


<<<<<<< HEAD
State 48
=======
   24 param: type-specifier type_ID '[' . ']'

    ']'  shift, and go to state 53


State 49

   25 compound-stmt: '{' . local-declarations statement-list '}'
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be

   14 fun-declaration: type-specifier type_ID '(' params ')' compound-stmt .

<<<<<<< HEAD
    $default  reduce using rule 14 (fun-declaration)
=======
    local-declarations  go to state 54
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be


State 50

<<<<<<< HEAD
   22 param: type-specifier type_ID '[' ']' .
=======
   16 fun-declaration: type-specifier type_ID '(' params ')' compound-stmt .
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be

    $default  reduce using rule 22 (param)


State 51

   13 enum-declaration: ENUM type_ID '{' param-list '}' type_ID ';' .

    $default  reduce using rule 13 (enum-declaration)


State 52

<<<<<<< HEAD
   23 compound-stmt: '{' local-declarations . statement-list '}'
   24 local-declarations: local-declarations . var-declaration
   25                   | local-declarations . const-declaration
   26                   | local-declarations . enum-declaration
=======
   13 enum-declaration: ENUM type_ID '{' id-list '}' type_ID ';' .
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be

    INT   shift, and go to state 1
    VOID  shift, and go to state 2
    ENUM  shift, and go to state 3

    $default  reduce using rule 29 (statement-list)

<<<<<<< HEAD
    var-declaration    go to state 52
    const-declaration  go to state 53
    enum-declaration   go to state 54
    type-specifier     go to state 55
    statement-list     go to state 56

=======
State 53

   24 param: type-specifier type_ID '[' ']' .
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be

State 52

   24 local-declarations: local-declarations var-declaration .

<<<<<<< HEAD
    $default  reduce using rule 24 (local-declarations)
=======
State 54
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be


State 53

   25 local-declarations: local-declarations const-declaration .

<<<<<<< HEAD
    $default  reduce using rule 25 (local-declarations)
=======
    var-declaration    go to state 55
    const-declaration  go to state 56
    enum-declaration   go to state 57
    type-specifier     go to state 58
    statement-list     go to state 59
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be


State 55

   26 local-declarations: local-declarations enum-declaration .

    $default  reduce using rule 26 (local-declarations)


State 56

    8 var-declaration: type-specifier . type_ID ';'
    9                | type-specifier . type_ID '[' type_NUM ']' ';'

    ID  shift, and go to state 13

    type_ID  go to state 57

<<<<<<< HEAD
=======
State 57
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be

State 56

   23 compound-stmt: '{' local-declarations statement-list . '}'
   28 statement-list: statement-list . statement

    NUM     shift, and go to state 30
    ID      shift, and go to state 13
    IF      shift, and go to state 58
    RETURN  shift, and go to state 59
    WHILE   shift, and go to state 60
    INC     shift, and go to state 61
    DEC     shift, and go to state 62
    ';'     shift, and go to state 63
    '{'     shift, and go to state 47
    '}'     shift, and go to state 64
    '('     shift, and go to state 65
    '!'     shift, and go to state 66

    compound-stmt        go to state 67
    statement            go to state 68
    expression-stmt      go to state 69
    selection-stmt       go to state 70
    iteration-stmt       go to state 71
    return-stmt          go to state 72
    expression           go to state 73
    var                  go to state 74
    simple-expression    go to state 75
    additive-expression  go to state 76
    term                 go to state 77
    unary-expression     go to state 78
    unary_op             go to state 79
    factor               go to state 80
    call                 go to state 81
    type_NUM             go to state 82
    type_ID              go to state 83


State 58

<<<<<<< HEAD
    8 var-declaration: type-specifier type_ID . ';'
    9                | type-specifier type_ID . '[' type_NUM ']' ';'

    ';'  shift, and go to state 21
    '['  shift, and go to state 22
=======
    8 var-declaration: type-specifier . type_ID ';'
    9                | type-specifier . type_ID '[' type_NUM ']' ';'

    ID  shift, and go to state 13

    type_ID  go to state 60
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be


State 59

<<<<<<< HEAD
   37 selection-stmt: IF . '(' expression ')' statement
   38               | IF . '(' expression ')' statement ELSE statement

    '('  shift, and go to state 84


State 59

   40 return-stmt: RETURN . ';'
   41            | RETURN . expression ';'

    NUM  shift, and go to state 30
    ID   shift, and go to state 13
    INC  shift, and go to state 61
    DEC  shift, and go to state 62
    ';'  shift, and go to state 85
    '('  shift, and go to state 65
    '!'  shift, and go to state 66

    expression           go to state 86
    var                  go to state 74
    simple-expression    go to state 75
    additive-expression  go to state 76
    term                 go to state 77
    unary-expression     go to state 78
    unary_op             go to state 79
    factor               go to state 80
    call                 go to state 81
    type_NUM             go to state 82
    type_ID              go to state 83
=======
   25 compound-stmt: '{' local-declarations statement-list . '}'
   30 statement-list: statement-list . statement

    NUM     shift, and go to state 28
    ID      shift, and go to state 13
    IF      shift, and go to state 61
    RETURN  shift, and go to state 62
    WHILE   shift, and go to state 63
    INC     shift, and go to state 64
    DEC     shift, and go to state 65
    ';'     shift, and go to state 66
    '{'     shift, and go to state 49
    '}'     shift, and go to state 67
    '('     shift, and go to state 68
    '!'     shift, and go to state 69

    compound-stmt        go to state 70
    statement            go to state 71
    expression-stmt      go to state 72
    selection-stmt       go to state 73
    iteration-stmt       go to state 74
    return-stmt          go to state 75
    expression           go to state 76
    var                  go to state 77
    simple-expression    go to state 78
    additive-expression  go to state 79
    term                 go to state 80
    unary-expression     go to state 81
    unary_op             go to state 82
    factor               go to state 83
    call                 go to state 84
    type_NUM             go to state 85
    type_ID              go to state 86
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be


State 60

<<<<<<< HEAD
   39 iteration-stmt: WHILE . '(' expression ')' statement

    '('  shift, and go to state 87
=======
    8 var-declaration: type-specifier type_ID . ';'
    9                | type-specifier type_ID . '[' type_NUM ']' ';'

    ';'  shift, and go to state 21
    '['  shift, and go to state 22
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be


State 61

<<<<<<< HEAD
   67 unary_op: INC .

    $default  reduce using rule 67 (unary_op)


State 62

   66 unary_op: DEC .

    $default  reduce using rule 66 (unary_op)
=======
   39 selection-stmt: IF . '(' expression ')' statement
   40               | IF . '(' expression ')' statement ELSE statement

    '('  shift, and go to state 87
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be


State 62

<<<<<<< HEAD
   36 expression-stmt: ';' .

    $default  reduce using rule 36 (expression-stmt)
=======
   42 return-stmt: RETURN . ';'
   43            | RETURN . expression ';'

    NUM  shift, and go to state 28
    ID   shift, and go to state 13
    INC  shift, and go to state 64
    DEC  shift, and go to state 65
    ';'  shift, and go to state 88
    '('  shift, and go to state 68
    '!'  shift, and go to state 69

    expression           go to state 89
    var                  go to state 77
    simple-expression    go to state 78
    additive-expression  go to state 79
    term                 go to state 80
    unary-expression     go to state 81
    unary_op             go to state 82
    factor               go to state 83
    call                 go to state 84
    type_NUM             go to state 85
    type_ID              go to state 86
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be


State 63

   23 compound-stmt: '{' local-declarations statement-list '}' .

<<<<<<< HEAD
    $default  reduce using rule 23 (compound-stmt)
=======
    '('  shift, and go to state 90
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be


State 64

   69 factor: '(' . expression ')'

    NUM  shift, and go to state 30
    ID   shift, and go to state 13
    INC  shift, and go to state 61
    DEC  shift, and go to state 62
    '('  shift, and go to state 65
    '!'  shift, and go to state 66

    expression           go to state 88
    var                  go to state 74
    simple-expression    go to state 75
    additive-expression  go to state 76
    term                 go to state 77
    unary-expression     go to state 78
    unary_op             go to state 79
    factor               go to state 80
    call                 go to state 81
    type_NUM             go to state 82
    type_ID              go to state 83


State 65

   65 unary_op: '!' .

    $default  reduce using rule 65 (unary_op)


State 66

   31 statement: compound-stmt .

    $default  reduce using rule 31 (statement)


State 67

   28 statement-list: statement-list statement .

    $default  reduce using rule 28 (statement-list)


State 68

<<<<<<< HEAD
   30 statement: expression-stmt .

    $default  reduce using rule 30 (statement)
=======
   71 factor: '(' . expression ')'

    NUM  shift, and go to state 28
    ID   shift, and go to state 13
    INC  shift, and go to state 64
    DEC  shift, and go to state 65
    '('  shift, and go to state 68
    '!'  shift, and go to state 69

    expression           go to state 91
    var                  go to state 77
    simple-expression    go to state 78
    additive-expression  go to state 79
    term                 go to state 80
    unary-expression     go to state 81
    unary_op             go to state 82
    factor               go to state 83
    call                 go to state 84
    type_NUM             go to state 85
    type_ID              go to state 86
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be


State 69

   32 statement: selection-stmt .

    $default  reduce using rule 32 (statement)


State 70

   33 statement: iteration-stmt .

    $default  reduce using rule 33 (statement)


State 71

   34 statement: return-stmt .

    $default  reduce using rule 34 (statement)


State 72

   35 expression-stmt: expression . ';'

    ';'  shift, and go to state 89


State 73

   42 expression: var . '=' expression
   70 factor: var .

    '='  shift, and go to state 90

    $default  reduce using rule 70 (factor)


State 74

   43 expression: simple-expression .
   47 simple-expression: simple-expression . logop additive-expression

    AND  shift, and go to state 91
    OR   shift, and go to state 92

    $default  reduce using rule 43 (expression)

    logop  go to state 93


State 75

   46 simple-expression: additive-expression . relop additive-expression
   48                  | additive-expression .
   58 additive-expression: additive-expression . '+' term
   59                    | additive-expression . '-' term

    EQ    shift, and go to state 94
    NEQ   shift, and go to state 95
    LT    shift, and go to state 96
    GT    shift, and go to state 97
    LTEQ  shift, and go to state 98
    GTEQ  shift, and go to state 99
    '+'   shift, and go to state 100
    '-'   shift, and go to state 101

    $default  reduce using rule 48 (simple-expression)

    relop  go to state 102


State 76

   57 additive-expression: term .
   61 term: term . '*' factor
   62     | term . '/' factor

<<<<<<< HEAD
    '*'  shift, and go to state 103
    '/'  shift, and go to state 104
=======
    ';'  shift, and go to state 92
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be

    $default  reduce using rule 57 (additive-expression)

<<<<<<< HEAD
=======
State 77
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be

State 78

<<<<<<< HEAD
   63 term: unary-expression .
=======
    '='  shift, and go to state 93
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be

    $default  reduce using rule 63 (term)


State 78

<<<<<<< HEAD
   64 unary-expression: unary_op . factor
=======
   45 expression: simple-expression .
   49 simple-expression: simple-expression . logop additive-expression

    AND  shift, and go to state 94
    OR   shift, and go to state 95
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be

    NUM  shift, and go to state 30
    ID   shift, and go to state 13
    '('  shift, and go to state 65

<<<<<<< HEAD
    var       go to state 105
    factor    go to state 106
    call      go to state 81
    type_NUM  go to state 82
    type_ID   go to state 83
=======
    logop  go to state 96
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be


State 79

   60 term: factor .

<<<<<<< HEAD
    $default  reduce using rule 60 (term)
=======
    EQ    shift, and go to state 97
    NEQ   shift, and go to state 98
    LT    shift, and go to state 99
    GT    shift, and go to state 100
    LTEQ  shift, and go to state 101
    GTEQ  shift, and go to state 102
    '+'   shift, and go to state 103
    '-'   shift, and go to state 104

    $default  reduce using rule 50 (simple-expression)

    relop  go to state 105
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be


State 80

<<<<<<< HEAD
   71 factor: call .
=======
   59 additive-expression: term .
   63 term: term . '*' factor
   64     | term . '/' factor

    '*'  shift, and go to state 106
    '/'  shift, and go to state 107
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be

    $default  reduce using rule 71 (factor)


State 81

   68 factor: type_NUM .

    $default  reduce using rule 68 (factor)


State 82

   44 var: type_ID .
   45    | type_ID . '[' expression ']'
   72 call: type_ID . '(' args ')'

<<<<<<< HEAD
    '['  shift, and go to state 107
    '('  shift, and go to state 108

    $default  reduce using rule 44 (var)
=======
    NUM  shift, and go to state 28
    ID   shift, and go to state 13
    '('  shift, and go to state 68

    var       go to state 108
    factor    go to state 109
    call      go to state 84
    type_NUM  go to state 85
    type_ID   go to state 86
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be


State 83

   37 selection-stmt: IF '(' . expression ')' statement
   38               | IF '(' . expression ')' statement ELSE statement

    NUM  shift, and go to state 30
    ID   shift, and go to state 13
    INC  shift, and go to state 61
    DEC  shift, and go to state 62
    '('  shift, and go to state 65
    '!'  shift, and go to state 66

    expression           go to state 109
    var                  go to state 74
    simple-expression    go to state 75
    additive-expression  go to state 76
    term                 go to state 77
    unary-expression     go to state 78
    unary_op             go to state 79
    factor               go to state 80
    call                 go to state 81
    type_NUM             go to state 82
    type_ID              go to state 83


State 84

   40 return-stmt: RETURN ';' .

    $default  reduce using rule 40 (return-stmt)


<<<<<<< HEAD
State 86

   41 return-stmt: RETURN expression . ';'

    ';'  shift, and go to state 110
=======
State 85

   70 factor: type_NUM .
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be

    $default  reduce using rule 70 (factor)


<<<<<<< HEAD
   39 iteration-stmt: WHILE '(' . expression ')' statement

    NUM  shift, and go to state 30
    ID   shift, and go to state 13
    INC  shift, and go to state 61
    DEC  shift, and go to state 62
    '('  shift, and go to state 65
    '!'  shift, and go to state 66

    expression           go to state 111
    var                  go to state 74
    simple-expression    go to state 75
    additive-expression  go to state 76
    term                 go to state 77
    unary-expression     go to state 78
    unary_op             go to state 79
    factor               go to state 80
    call                 go to state 81
    type_NUM             go to state 82
    type_ID              go to state 83
=======
State 86

   46 var: type_ID .
   47    | type_ID . '[' expression ']'
   74 call: type_ID . '(' args ')'

    '['  shift, and go to state 110
    '('  shift, and go to state 111

    $default  reduce using rule 46 (var)
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be


State 87

   69 factor: '(' expression . ')'

<<<<<<< HEAD
    ')'  shift, and go to state 112
=======
    NUM  shift, and go to state 28
    ID   shift, and go to state 13
    INC  shift, and go to state 64
    DEC  shift, and go to state 65
    '('  shift, and go to state 68
    '!'  shift, and go to state 69

    expression           go to state 112
    var                  go to state 77
    simple-expression    go to state 78
    additive-expression  go to state 79
    term                 go to state 80
    unary-expression     go to state 81
    unary_op             go to state 82
    factor               go to state 83
    call                 go to state 84
    type_NUM             go to state 85
    type_ID              go to state 86
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be


State 88

   35 expression-stmt: expression ';' .

    $default  reduce using rule 35 (expression-stmt)


State 89

   42 expression: var '=' . expression

<<<<<<< HEAD
    NUM  shift, and go to state 30
    ID   shift, and go to state 13
    INC  shift, and go to state 61
    DEC  shift, and go to state 62
    '('  shift, and go to state 65
    '!'  shift, and go to state 66
=======
    ';'  shift, and go to state 113
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be

    expression           go to state 113
    var                  go to state 74
    simple-expression    go to state 75
    additive-expression  go to state 76
    term                 go to state 77
    unary-expression     go to state 78
    unary_op             go to state 79
    factor               go to state 80
    call                 go to state 81
    type_NUM             go to state 82
    type_ID              go to state 83

<<<<<<< HEAD
=======
State 90
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be

State 91

<<<<<<< HEAD
   55 logop: AND .

    $default  reduce using rule 55 (logop)
=======
    NUM  shift, and go to state 28
    ID   shift, and go to state 13
    INC  shift, and go to state 64
    DEC  shift, and go to state 65
    '('  shift, and go to state 68
    '!'  shift, and go to state 69

    expression           go to state 114
    var                  go to state 77
    simple-expression    go to state 78
    additive-expression  go to state 79
    term                 go to state 80
    unary-expression     go to state 81
    unary_op             go to state 82
    factor               go to state 83
    call                 go to state 84
    type_NUM             go to state 85
    type_ID              go to state 86
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be


State 91

   56 logop: OR .

<<<<<<< HEAD
    $default  reduce using rule 56 (logop)
=======
    ')'  shift, and go to state 115
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be


State 92

   47 simple-expression: simple-expression logop . additive-expression

    NUM  shift, and go to state 30
    ID   shift, and go to state 13
    INC  shift, and go to state 61
    DEC  shift, and go to state 62
    '('  shift, and go to state 65
    '!'  shift, and go to state 66

    var                  go to state 105
    additive-expression  go to state 114
    term                 go to state 77
    unary-expression     go to state 78
    unary_op             go to state 79
    factor               go to state 80
    call                 go to state 81
    type_NUM             go to state 82
    type_ID              go to state 83

<<<<<<< HEAD
=======
State 93
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be

State 94

<<<<<<< HEAD
   53 relop: EQ .

    $default  reduce using rule 53 (relop)
=======
    NUM  shift, and go to state 28
    ID   shift, and go to state 13
    INC  shift, and go to state 64
    DEC  shift, and go to state 65
    '('  shift, and go to state 68
    '!'  shift, and go to state 69

    expression           go to state 116
    var                  go to state 77
    simple-expression    go to state 78
    additive-expression  go to state 79
    term                 go to state 80
    unary-expression     go to state 81
    unary_op             go to state 82
    factor               go to state 83
    call                 go to state 84
    type_NUM             go to state 85
    type_ID              go to state 86
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be


State 94

   54 relop: NEQ .

    $default  reduce using rule 54 (relop)


State 95

   50 relop: LT .

    $default  reduce using rule 50 (relop)


State 96

<<<<<<< HEAD
   51 relop: GT .

    $default  reduce using rule 51 (relop)
=======
   49 simple-expression: simple-expression logop . additive-expression

    NUM  shift, and go to state 28
    ID   shift, and go to state 13
    INC  shift, and go to state 64
    DEC  shift, and go to state 65
    '('  shift, and go to state 68
    '!'  shift, and go to state 69

    var                  go to state 108
    additive-expression  go to state 117
    term                 go to state 80
    unary-expression     go to state 81
    unary_op             go to state 82
    factor               go to state 83
    call                 go to state 84
    type_NUM             go to state 85
    type_ID              go to state 86
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be


State 97

   49 relop: LTEQ .

    $default  reduce using rule 49 (relop)


State 98

   52 relop: GTEQ .

    $default  reduce using rule 52 (relop)


State 99

   58 additive-expression: additive-expression '+' . term

    NUM  shift, and go to state 30
    ID   shift, and go to state 13
    INC  shift, and go to state 61
    DEC  shift, and go to state 62
    '('  shift, and go to state 65
    '!'  shift, and go to state 66

    var               go to state 105
    term              go to state 115
    unary-expression  go to state 78
    unary_op          go to state 79
    factor            go to state 80
    call              go to state 81
    type_NUM          go to state 82
    type_ID           go to state 83


State 100

   59 additive-expression: additive-expression '-' . term

    NUM  shift, and go to state 30
    ID   shift, and go to state 13
    INC  shift, and go to state 61
    DEC  shift, and go to state 62
    '('  shift, and go to state 65
    '!'  shift, and go to state 66

    var               go to state 105
    term              go to state 116
    unary-expression  go to state 78
    unary_op          go to state 79
    factor            go to state 80
    call              go to state 81
    type_NUM          go to state 82
    type_ID           go to state 83


State 101

   46 simple-expression: additive-expression relop . additive-expression

    NUM  shift, and go to state 30
    ID   shift, and go to state 13
    INC  shift, and go to state 61
    DEC  shift, and go to state 62
    '('  shift, and go to state 65
    '!'  shift, and go to state 66

    var                  go to state 105
    additive-expression  go to state 117
    term                 go to state 77
    unary-expression     go to state 78
    unary_op             go to state 79
    factor               go to state 80
    call                 go to state 81
    type_NUM             go to state 82
    type_ID              go to state 83


State 102

   61 term: term '*' . factor

    NUM  shift, and go to state 30
    ID   shift, and go to state 13
    '('  shift, and go to state 65

    var       go to state 105
    factor    go to state 118
    call      go to state 81
    type_NUM  go to state 82
    type_ID   go to state 83


State 103

   62 term: term '/' . factor

<<<<<<< HEAD
    NUM  shift, and go to state 30
    ID   shift, and go to state 13
    '('  shift, and go to state 65

    var       go to state 105
    factor    go to state 119
    call      go to state 81
    type_NUM  go to state 82
    type_ID   go to state 83
=======
    NUM  shift, and go to state 28
    ID   shift, and go to state 13
    INC  shift, and go to state 64
    DEC  shift, and go to state 65
    '('  shift, and go to state 68
    '!'  shift, and go to state 69

    var               go to state 108
    term              go to state 118
    unary-expression  go to state 81
    unary_op          go to state 82
    factor            go to state 83
    call              go to state 84
    type_NUM          go to state 85
    type_ID           go to state 86
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be


State 104

   70 factor: var .

<<<<<<< HEAD
    $default  reduce using rule 70 (factor)
=======
    NUM  shift, and go to state 28
    ID   shift, and go to state 13
    INC  shift, and go to state 64
    DEC  shift, and go to state 65
    '('  shift, and go to state 68
    '!'  shift, and go to state 69

    var               go to state 108
    term              go to state 119
    unary-expression  go to state 81
    unary_op          go to state 82
    factor            go to state 83
    call              go to state 84
    type_NUM          go to state 85
    type_ID           go to state 86
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be


State 105

<<<<<<< HEAD
   64 unary-expression: unary_op factor .

    $default  reduce using rule 64 (unary-expression)
=======
   48 simple-expression: additive-expression relop . additive-expression

    NUM  shift, and go to state 28
    ID   shift, and go to state 13
    INC  shift, and go to state 64
    DEC  shift, and go to state 65
    '('  shift, and go to state 68
    '!'  shift, and go to state 69

    var                  go to state 108
    additive-expression  go to state 120
    term                 go to state 80
    unary-expression     go to state 81
    unary_op             go to state 82
    factor               go to state 83
    call                 go to state 84
    type_NUM             go to state 85
    type_ID              go to state 86
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be


State 106

   45 var: type_ID '[' . expression ']'

<<<<<<< HEAD
    NUM  shift, and go to state 30
    ID   shift, and go to state 13
    INC  shift, and go to state 61
    DEC  shift, and go to state 62
    '('  shift, and go to state 65
    '!'  shift, and go to state 66

    expression           go to state 120
    var                  go to state 74
    simple-expression    go to state 75
    additive-expression  go to state 76
    term                 go to state 77
    unary-expression     go to state 78
    unary_op             go to state 79
    factor               go to state 80
    call                 go to state 81
    type_NUM             go to state 82
    type_ID              go to state 83
=======
    NUM  shift, and go to state 28
    ID   shift, and go to state 13
    '('  shift, and go to state 68

    var       go to state 108
    factor    go to state 121
    call      go to state 84
    type_NUM  go to state 85
    type_ID   go to state 86
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be


State 107

   72 call: type_ID '(' . args ')'

<<<<<<< HEAD
    NUM  shift, and go to state 30
    ID   shift, and go to state 13
    INC  shift, and go to state 61
    DEC  shift, and go to state 62
    '('  shift, and go to state 65
    '!'  shift, and go to state 66

    $default  reduce using rule 74 (args)

    expression           go to state 121
    var                  go to state 74
    simple-expression    go to state 75
    additive-expression  go to state 76
    term                 go to state 77
    unary-expression     go to state 78
    unary_op             go to state 79
    factor               go to state 80
    call                 go to state 81
    args                 go to state 122
    args-list            go to state 123
    type_NUM             go to state 82
    type_ID              go to state 83
=======
    NUM  shift, and go to state 28
    ID   shift, and go to state 13
    '('  shift, and go to state 68

    var       go to state 108
    factor    go to state 122
    call      go to state 84
    type_NUM  go to state 85
    type_ID   go to state 86
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be


State 108

   37 selection-stmt: IF '(' expression . ')' statement
   38               | IF '(' expression . ')' statement ELSE statement

    ')'  shift, and go to state 124


State 109

   41 return-stmt: RETURN expression ';' .

    $default  reduce using rule 41 (return-stmt)


<<<<<<< HEAD
State 111

   39 iteration-stmt: WHILE '(' expression . ')' statement

    ')'  shift, and go to state 125


State 112

   69 factor: '(' expression ')' .

    $default  reduce using rule 69 (factor)

=======
State 110
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be

   47 var: type_ID '[' . expression ']'

<<<<<<< HEAD
   42 expression: var '=' expression .

    $default  reduce using rule 42 (expression)
=======
    NUM  shift, and go to state 28
    ID   shift, and go to state 13
    INC  shift, and go to state 64
    DEC  shift, and go to state 65
    '('  shift, and go to state 68
    '!'  shift, and go to state 69

    expression           go to state 123
    var                  go to state 77
    simple-expression    go to state 78
    additive-expression  go to state 79
    term                 go to state 80
    unary-expression     go to state 81
    unary_op             go to state 82
    factor               go to state 83
    call                 go to state 84
    type_NUM             go to state 85
    type_ID              go to state 86

>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be

State 111

   74 call: type_ID '(' . args ')'

<<<<<<< HEAD
   47 simple-expression: simple-expression logop additive-expression .
   58 additive-expression: additive-expression . '+' term
   59                    | additive-expression . '-' term

    '+'  shift, and go to state 100
    '-'  shift, and go to state 101

    $default  reduce using rule 47 (simple-expression)
=======
    NUM  shift, and go to state 28
    ID   shift, and go to state 13
    INC  shift, and go to state 64
    DEC  shift, and go to state 65
    '('  shift, and go to state 68
    '!'  shift, and go to state 69

    $default  reduce using rule 76 (args)

    expression           go to state 124
    var                  go to state 77
    simple-expression    go to state 78
    additive-expression  go to state 79
    term                 go to state 80
    unary-expression     go to state 81
    unary_op             go to state 82
    factor               go to state 83
    call                 go to state 84
    args                 go to state 125
    args-list            go to state 126
    type_NUM             go to state 85
    type_ID              go to state 86
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be


State 112

   58 additive-expression: additive-expression '+' term .
   61 term: term . '*' factor
   62     | term . '/' factor

    '*'  shift, and go to state 103
    '/'  shift, and go to state 104

<<<<<<< HEAD
    $default  reduce using rule 58 (additive-expression)
=======
    ')'  shift, and go to state 127
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be


State 113

   59 additive-expression: additive-expression '-' term .
   61 term: term . '*' factor
   62     | term . '/' factor

    '*'  shift, and go to state 103
    '/'  shift, and go to state 104

    $default  reduce using rule 59 (additive-expression)


State 114

   46 simple-expression: additive-expression relop additive-expression .
   58 additive-expression: additive-expression . '+' term
   59                    | additive-expression . '-' term

    '+'  shift, and go to state 100
    '-'  shift, and go to state 101

<<<<<<< HEAD
    $default  reduce using rule 46 (simple-expression)
=======
    ')'  shift, and go to state 128
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be


State 115

   61 term: term '*' factor .

    $default  reduce using rule 61 (term)


State 116

   62 term: term '/' factor .

    $default  reduce using rule 62 (term)


State 117

   45 var: type_ID '[' expression . ']'

<<<<<<< HEAD
    ']'  shift, and go to state 126
=======
    '+'  shift, and go to state 103
    '-'  shift, and go to state 104

    $default  reduce using rule 49 (simple-expression)
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be


State 118

<<<<<<< HEAD
   75 args-list: expression .
=======
   60 additive-expression: additive-expression '+' term .
   63 term: term . '*' factor
   64     | term . '/' factor

    '*'  shift, and go to state 106
    '/'  shift, and go to state 107
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be

    $default  reduce using rule 75 (args-list)


State 119

   72 call: type_ID '(' args . ')'

<<<<<<< HEAD
    ')'  shift, and go to state 127
=======
    '*'  shift, and go to state 106
    '/'  shift, and go to state 107

    $default  reduce using rule 61 (additive-expression)
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be


State 120

   73 args: args-list .
   76 args-list: args-list . ',' expression

<<<<<<< HEAD
    ','  shift, and go to state 128
=======
    '+'  shift, and go to state 103
    '-'  shift, and go to state 104
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be

    $default  reduce using rule 73 (args)


State 121

   37 selection-stmt: IF '(' expression ')' . statement
   38               | IF '(' expression ')' . statement ELSE statement

    NUM     shift, and go to state 30
    ID      shift, and go to state 13
    IF      shift, and go to state 58
    RETURN  shift, and go to state 59
    WHILE   shift, and go to state 60
    INC     shift, and go to state 61
    DEC     shift, and go to state 62
    ';'     shift, and go to state 63
    '{'     shift, and go to state 47
    '('     shift, and go to state 65
    '!'     shift, and go to state 66

    compound-stmt        go to state 67
    statement            go to state 129
    expression-stmt      go to state 69
    selection-stmt       go to state 70
    iteration-stmt       go to state 71
    return-stmt          go to state 72
    expression           go to state 73
    var                  go to state 74
    simple-expression    go to state 75
    additive-expression  go to state 76
    term                 go to state 77
    unary-expression     go to state 78
    unary_op             go to state 79
    factor               go to state 80
    call                 go to state 81
    type_NUM             go to state 82
    type_ID              go to state 83


State 122

   39 iteration-stmt: WHILE '(' expression ')' . statement

    NUM     shift, and go to state 30
    ID      shift, and go to state 13
    IF      shift, and go to state 58
    RETURN  shift, and go to state 59
    WHILE   shift, and go to state 60
    INC     shift, and go to state 61
    DEC     shift, and go to state 62
    ';'     shift, and go to state 63
    '{'     shift, and go to state 47
    '('     shift, and go to state 65
    '!'     shift, and go to state 66

    compound-stmt        go to state 67
    statement            go to state 130
    expression-stmt      go to state 69
    selection-stmt       go to state 70
    iteration-stmt       go to state 71
    return-stmt          go to state 72
    expression           go to state 73
    var                  go to state 74
    simple-expression    go to state 75
    additive-expression  go to state 76
    term                 go to state 77
    unary-expression     go to state 78
    unary_op             go to state 79
    factor               go to state 80
    call                 go to state 81
    type_NUM             go to state 82
    type_ID              go to state 83


State 123

<<<<<<< HEAD
   45 var: type_ID '[' expression ']' .

    $default  reduce using rule 45 (var)
=======
   47 var: type_ID '[' expression . ']'

    ']'  shift, and go to state 129
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be


State 124

<<<<<<< HEAD
   72 call: type_ID '(' args ')' .

    $default  reduce using rule 72 (call)
=======
   78 args-list: expression .

    $default  reduce using rule 78 (args-list)
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be


State 125

<<<<<<< HEAD
   76 args-list: args-list ',' . expression

    NUM  shift, and go to state 30
    ID   shift, and go to state 13
    INC  shift, and go to state 61
    DEC  shift, and go to state 62
    '('  shift, and go to state 65
    '!'  shift, and go to state 66

    expression           go to state 131
    var                  go to state 74
    simple-expression    go to state 75
    additive-expression  go to state 76
    term                 go to state 77
    unary-expression     go to state 78
    unary_op             go to state 79
    factor               go to state 80
    call                 go to state 81
    type_NUM             go to state 82
    type_ID              go to state 83
=======
   74 call: type_ID '(' args . ')'

    ')'  shift, and go to state 130

>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be

State 126

   75 args: args-list .
   77 args-list: args-list . ',' expression

    ','  shift, and go to state 131

    $default  reduce using rule 75 (args)


State 127

<<<<<<< HEAD
   37 selection-stmt: IF '(' expression ')' statement .
   38               | IF '(' expression ')' statement . ELSE statement

    ELSE  shift, and go to state 132

    ELSE      [reduce using rule 37 (selection-stmt)]
    $default  reduce using rule 37 (selection-stmt)
=======
   39 selection-stmt: IF '(' expression ')' . statement
   40               | IF '(' expression ')' . statement ELSE statement

    NUM     shift, and go to state 28
    ID      shift, and go to state 13
    IF      shift, and go to state 61
    RETURN  shift, and go to state 62
    WHILE   shift, and go to state 63
    INC     shift, and go to state 64
    DEC     shift, and go to state 65
    ';'     shift, and go to state 66
    '{'     shift, and go to state 49
    '('     shift, and go to state 68
    '!'     shift, and go to state 69

    compound-stmt        go to state 70
    statement            go to state 132
    expression-stmt      go to state 72
    selection-stmt       go to state 73
    iteration-stmt       go to state 74
    return-stmt          go to state 75
    expression           go to state 76
    var                  go to state 77
    simple-expression    go to state 78
    additive-expression  go to state 79
    term                 go to state 80
    unary-expression     go to state 81
    unary_op             go to state 82
    factor               go to state 83
    call                 go to state 84
    type_NUM             go to state 85
    type_ID              go to state 86
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be


State 128

<<<<<<< HEAD
   39 iteration-stmt: WHILE '(' expression ')' statement .

    $default  reduce using rule 39 (iteration-stmt)
=======
   41 iteration-stmt: WHILE '(' expression ')' . statement

    NUM     shift, and go to state 28
    ID      shift, and go to state 13
    IF      shift, and go to state 61
    RETURN  shift, and go to state 62
    WHILE   shift, and go to state 63
    INC     shift, and go to state 64
    DEC     shift, and go to state 65
    ';'     shift, and go to state 66
    '{'     shift, and go to state 49
    '('     shift, and go to state 68
    '!'     shift, and go to state 69

    compound-stmt        go to state 70
    statement            go to state 133
    expression-stmt      go to state 72
    selection-stmt       go to state 73
    iteration-stmt       go to state 74
    return-stmt          go to state 75
    expression           go to state 76
    var                  go to state 77
    simple-expression    go to state 78
    additive-expression  go to state 79
    term                 go to state 80
    unary-expression     go to state 81
    unary_op             go to state 82
    factor               go to state 83
    call                 go to state 84
    type_NUM             go to state 85
    type_ID              go to state 86


State 129

   47 var: type_ID '[' expression ']' .

    $default  reduce using rule 47 (var)


State 130

   74 call: type_ID '(' args ')' .

    $default  reduce using rule 74 (call)
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be


State 131

<<<<<<< HEAD
   76 args-list: args-list ',' expression .

    $default  reduce using rule 76 (args-list)
=======
   77 args-list: args-list ',' . expression

    NUM  shift, and go to state 28
    ID   shift, and go to state 13
    INC  shift, and go to state 64
    DEC  shift, and go to state 65
    '('  shift, and go to state 68
    '!'  shift, and go to state 69

    expression           go to state 134
    var                  go to state 77
    simple-expression    go to state 78
    additive-expression  go to state 79
    term                 go to state 80
    unary-expression     go to state 81
    unary_op             go to state 82
    factor               go to state 83
    call                 go to state 84
    type_NUM             go to state 85
    type_ID              go to state 86
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be


State 132

<<<<<<< HEAD
   38 selection-stmt: IF '(' expression ')' statement ELSE . statement

    NUM     shift, and go to state 30
    ID      shift, and go to state 13
    IF      shift, and go to state 58
    RETURN  shift, and go to state 59
    WHILE   shift, and go to state 60
    INC     shift, and go to state 61
    DEC     shift, and go to state 62
    ';'     shift, and go to state 63
    '{'     shift, and go to state 47
    '('     shift, and go to state 65
    '!'     shift, and go to state 66

    compound-stmt        go to state 67
    statement            go to state 133
    expression-stmt      go to state 69
    selection-stmt       go to state 70
    iteration-stmt       go to state 71
    return-stmt          go to state 72
    expression           go to state 73
    var                  go to state 74
    simple-expression    go to state 75
    additive-expression  go to state 76
    term                 go to state 77
    unary-expression     go to state 78
    unary_op             go to state 79
    factor               go to state 80
    call                 go to state 81
    type_NUM             go to state 82
    type_ID              go to state 83
=======
   39 selection-stmt: IF '(' expression ')' statement .
   40               | IF '(' expression ')' statement . ELSE statement

    ELSE  shift, and go to state 135

    ELSE      [reduce using rule 39 (selection-stmt)]
    $default  reduce using rule 39 (selection-stmt)
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be


State 133

<<<<<<< HEAD
   38 selection-stmt: IF '(' expression ')' statement ELSE statement .
=======
   41 iteration-stmt: WHILE '(' expression ')' statement .

    $default  reduce using rule 41 (iteration-stmt)


State 134

   77 args-list: args-list ',' expression .

    $default  reduce using rule 77 (args-list)


State 135

   40 selection-stmt: IF '(' expression ')' statement ELSE . statement

    NUM     shift, and go to state 28
    ID      shift, and go to state 13
    IF      shift, and go to state 61
    RETURN  shift, and go to state 62
    WHILE   shift, and go to state 63
    INC     shift, and go to state 64
    DEC     shift, and go to state 65
    ';'     shift, and go to state 66
    '{'     shift, and go to state 49
    '('     shift, and go to state 68
    '!'     shift, and go to state 69

    compound-stmt        go to state 70
    statement            go to state 136
    expression-stmt      go to state 72
    selection-stmt       go to state 73
    iteration-stmt       go to state 74
    return-stmt          go to state 75
    expression           go to state 76
    var                  go to state 77
    simple-expression    go to state 78
    additive-expression  go to state 79
    term                 go to state 80
    unary-expression     go to state 81
    unary_op             go to state 82
    factor               go to state 83
    call                 go to state 84
    type_NUM             go to state 85
    type_ID              go to state 86


State 136

   40 selection-stmt: IF '(' expression ')' statement ELSE statement .
>>>>>>> 187d73f305fca1a9c5cd561075ffa6ec03ad02be

    $default  reduce using rule 38 (selection-stmt)
