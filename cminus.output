Terminals unused in grammar

    ERROR


State 129 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: declaration-list

    2 declaration-list: declaration
    3                 | declaration-list declaration

    4 declaration: var-declaration
    5            | fun-declaration
    6            | const-declaration
    7            | enum-declaration

    8 var-declaration: type-specifier type_ID ';'
    9                | type-specifier type_ID '[' type_NUM ']' ';'

   10 const-declaration: INT CONST type_ID '=' type_NUM ';'

   11 enum-declaration: ENUM type_ID type_ID ';'
   12                 | ENUM type_ID '{' param-list '}' ';'
   13                 | ENUM type_ID '{' param-list '}' type_ID ';'

   14 fun-declaration: type-specifier type_ID '(' params ')' compound-stmt

   15 type-specifier: INT
   16               | VOID

   17 params: param-list
   18       | VOID

   19 param-list: param-list ',' param
   20           | param

   21 param: type-specifier type_ID
   22      | type-specifier type_ID '[' ']'

   23 compound-stmt: '{' local-declarations statement-list '}'

   24 local-declarations: local-declarations var-declaration
   25                   | local-declarations const-declaration
   26                   | local-declarations enum-declaration
   27                   | %empty

   28 statement-list: statement-list statement
   29               | %empty

   30 statement: expression-stmt
   31          | compound-stmt
   32          | selection-stmt
   33          | iteration-stmt
   34          | return-stmt

   35 expression-stmt: expression ';'
   36                | ';'

   37 selection-stmt: IF '(' expression ')' statement
   38               | IF '(' expression ')' statement ELSE statement

   39 iteration-stmt: WHILE '(' expression ')' statement

   40 return-stmt: RETURN ';'
   41            | RETURN expression ';'

   42 expression: var '=' expression
   43           | simple-expression

   44 var: type_ID
   45    | type_ID '[' expression ']'

   46 simple-expression: additive-expression relop additive-expression
   47                  | simple-expression logop additive-expression
   48                  | additive-expression

   49 relop: LTEQ
   50      | LT
   51      | GT
   52      | GTEQ
   53      | EQ
   54      | NEQ

   55 logop: AND
   56      | OR

   57 additive-expression: term
   58                    | additive-expression '+' term
   59                    | additive-expression '-' term

   60 term: factor
   61     | term '*' factor
   62     | term '/' factor
   63     | unary-expression

   64 unary-expression: unary_op factor

   65 unary_op: '!'
   66         | DEC
   67         | INC

   68 factor: type_NUM
   69       | '(' expression ')'
   70       | var
   71       | call

   72 call: type_ID '(' args ')'

   73 args: args-list
   74     | %empty

   75 args-list: expression
   76          | args-list ',' expression

   77 type_NUM: NUM

   78 type_ID: ID


Terminals, with rules where they appear

    $end (0) 0
    '!' (33) 65
    '(' (40) 14 37 38 39 69 72
    ')' (41) 14 37 38 39 69 72
    '*' (42) 61
    '+' (43) 58
    ',' (44) 19 76
    '-' (45) 59
    '/' (47) 62
    ';' (59) 8 9 10 11 12 13 35 36 40 41
    '=' (61) 10 42
    '[' (91) 9 22 45
    ']' (93) 9 22 45
    '{' (123) 12 13 23
    '}' (125) 12 13 23
    error (256)
    NUM (258) 77
    ID (259) 78
    ELSE (260) 38
    IF (261) 37 38
    INT (262) 10 15
    RETURN (263) 40 41
    VOID (264) 16 18
    WHILE (265) 39
    EQ (266) 53
    NEQ (267) 54
    LT (268) 50
    GT (269) 51
    LTEQ (270) 49
    GTEQ (271) 52
    ERROR (272)
    CONST (273) 10
    ENUM (274) 11 12 13
    AND (275) 55
    OR (276) 56
    INC (277) 67
    DEC (278) 66


Nonterminals, with rules where they appear

    $accept (38)
        on left: 0
    program (39)
        on left: 1
        on right: 0
    declaration-list <decl> (40)
        on left: 2 3
        on right: 1 3
    declaration <decl> (41)
        on left: 4 5 6 7
        on right: 2 3
    var-declaration <decl> (42)
        on left: 8 9
        on right: 4 24
    const-declaration <decl> (43)
        on left: 10
        on right: 6 25
    enum-declaration <decl> (44)
        on left: 11 12 13
        on right: 7 26
    fun-declaration <decl> (45)
        on left: 14
        on right: 5
    type-specifier <type> (46)
        on left: 15 16
        on right: 8 9 14 21 22
    params <param_list> (47)
        on left: 17 18
        on right: 14
    param-list <param_list> (48)
        on left: 19 20
        on right: 12 13 17 19
    param <param_list> (49)
        on left: 21 22
        on right: 19 20
    compound-stmt <stmt> (50)
        on left: 23
        on right: 14 31
    local-declarations <decl> (51)
        on left: 24 25 26 27
        on right: 23 24 25 26
    statement-list <stmt> (52)
        on left: 28 29
        on right: 23 28
    statement <stmt> (53)
        on left: 30 31 32 33 34
        on right: 28 37 38 39
    expression-stmt <stmt> (54)
        on left: 35 36
        on right: 30
    selection-stmt <stmt> (55)
        on left: 37 38
        on right: 32
    iteration-stmt <stmt> (56)
        on left: 39
        on right: 33
    return-stmt <stmt> (57)
        on left: 40 41
        on right: 34
    expression <expr> (58)
        on left: 42 43
        on right: 35 37 38 39 41 42 45 69 75 76
    var <expr> (59)
        on left: 44 45
        on right: 42 70
    simple-expression <expr> (60)
        on left: 46 47 48
        on right: 43 47
    relop <expr> (61)
        on left: 49 50 51 52 53 54
        on right: 46
    logop <expr> (62)
        on left: 55 56
        on right: 47
    additive-expression <expr> (63)
        on left: 57 58 59
        on right: 46 47 48 58 59
    term <expr> (64)
        on left: 60 61 62 63
        on right: 57 58 59 61 62
    unary-expression <expr> (65)
        on left: 64
        on right: 63
    unary_op <expr> (66)
        on left: 65 66 67
        on right: 64
    factor <expr> (67)
        on left: 68 69 70 71
        on right: 60 61 62 64
    call <expr> (68)
        on left: 72
        on right: 71
    args <expr> (69)
        on left: 73 74
        on right: 72
    args-list <expr> (70)
        on left: 75 76
        on right: 73 76
    type_NUM <num> (71)
        on left: 77
        on right: 9 10 68
    type_ID <id> (72)
        on left: 78
        on right: 8 9 10 11 12 13 14 21 22 44 45 72


State 0

    0 $accept: . program $end

    INT   shift, and go to state 1
    VOID  shift, and go to state 2
    ENUM  shift, and go to state 3

    program            go to state 4
    declaration-list   go to state 5
    declaration        go to state 6
    var-declaration    go to state 7
    const-declaration  go to state 8
    enum-declaration   go to state 9
    fun-declaration    go to state 10
    type-specifier     go to state 11


State 1

   10 const-declaration: INT . CONST type_ID '=' type_NUM ';'
   15 type-specifier: INT .

    CONST  shift, and go to state 12

    $default  reduce using rule 15 (type-specifier)


State 2

   16 type-specifier: VOID .

    $default  reduce using rule 16 (type-specifier)


State 3

   11 enum-declaration: ENUM . type_ID type_ID ';'
   12                 | ENUM . type_ID '{' param-list '}' ';'
   13                 | ENUM . type_ID '{' param-list '}' type_ID ';'

    ID  shift, and go to state 13

    type_ID  go to state 14


State 4

    0 $accept: program . $end

    $end  shift, and go to state 15


State 5

    1 program: declaration-list .
    3 declaration-list: declaration-list . declaration

    INT   shift, and go to state 1
    VOID  shift, and go to state 2
    ENUM  shift, and go to state 3

    $default  reduce using rule 1 (program)

    declaration        go to state 16
    var-declaration    go to state 7
    const-declaration  go to state 8
    enum-declaration   go to state 9
    fun-declaration    go to state 10
    type-specifier     go to state 11


State 6

    2 declaration-list: declaration .

    $default  reduce using rule 2 (declaration-list)


State 7

    4 declaration: var-declaration .

    $default  reduce using rule 4 (declaration)


State 8

    6 declaration: const-declaration .

    $default  reduce using rule 6 (declaration)


State 9

    7 declaration: enum-declaration .

    $default  reduce using rule 7 (declaration)


State 10

    5 declaration: fun-declaration .

    $default  reduce using rule 5 (declaration)


State 11

    8 var-declaration: type-specifier . type_ID ';'
    9                | type-specifier . type_ID '[' type_NUM ']' ';'
   14 fun-declaration: type-specifier . type_ID '(' params ')' compound-stmt

    ID  shift, and go to state 13

    type_ID  go to state 17


State 12

   10 const-declaration: INT CONST . type_ID '=' type_NUM ';'

    ID  shift, and go to state 13

    type_ID  go to state 18


State 13

   78 type_ID: ID .

    $default  reduce using rule 78 (type_ID)


State 14

   11 enum-declaration: ENUM type_ID . type_ID ';'
   12                 | ENUM type_ID . '{' param-list '}' ';'
   13                 | ENUM type_ID . '{' param-list '}' type_ID ';'

    ID   shift, and go to state 13
    '{'  shift, and go to state 19

    type_ID  go to state 20


State 15

    0 $accept: program $end .

    $default  accept


State 16

    3 declaration-list: declaration-list declaration .

    $default  reduce using rule 3 (declaration-list)


State 17

    8 var-declaration: type-specifier type_ID . ';'
    9                | type-specifier type_ID . '[' type_NUM ']' ';'
   14 fun-declaration: type-specifier type_ID . '(' params ')' compound-stmt

    ';'  shift, and go to state 21
    '['  shift, and go to state 22
    '('  shift, and go to state 23


State 18

   10 const-declaration: INT CONST type_ID . '=' type_NUM ';'

    '='  shift, and go to state 24


State 19

   12 enum-declaration: ENUM type_ID '{' . param-list '}' ';'
   13                 | ENUM type_ID '{' . param-list '}' type_ID ';'

    INT   shift, and go to state 25
    VOID  shift, and go to state 2

    type-specifier  go to state 26
    param-list      go to state 27
    param           go to state 28


State 20

   11 enum-declaration: ENUM type_ID type_ID . ';'

    ';'  shift, and go to state 29


State 21

    8 var-declaration: type-specifier type_ID ';' .

    $default  reduce using rule 8 (var-declaration)


State 22

    9 var-declaration: type-specifier type_ID '[' . type_NUM ']' ';'

    NUM  shift, and go to state 30

    type_NUM  go to state 31


State 23

   14 fun-declaration: type-specifier type_ID '(' . params ')' compound-stmt

    INT   shift, and go to state 25
    VOID  shift, and go to state 32

    type-specifier  go to state 26
    params          go to state 33
    param-list      go to state 34
    param           go to state 28


State 24

   10 const-declaration: INT CONST type_ID '=' . type_NUM ';'

    NUM  shift, and go to state 30

    type_NUM  go to state 35


State 25

   15 type-specifier: INT .

    $default  reduce using rule 15 (type-specifier)


State 26

   21 param: type-specifier . type_ID
   22      | type-specifier . type_ID '[' ']'

    ID  shift, and go to state 13

    type_ID  go to state 36


State 27

   12 enum-declaration: ENUM type_ID '{' param-list . '}' ';'
   13                 | ENUM type_ID '{' param-list . '}' type_ID ';'
   19 param-list: param-list . ',' param

    '}'  shift, and go to state 37
    ','  shift, and go to state 38


State 28

   20 param-list: param .

    $default  reduce using rule 20 (param-list)


State 29

   11 enum-declaration: ENUM type_ID type_ID ';' .

    $default  reduce using rule 11 (enum-declaration)


State 30

   77 type_NUM: NUM .

    $default  reduce using rule 77 (type_NUM)


State 31

    9 var-declaration: type-specifier type_ID '[' type_NUM . ']' ';'

    ']'  shift, and go to state 39


State 32

   16 type-specifier: VOID .
   18 params: VOID .

    ')'       reduce using rule 18 (params)
    $default  reduce using rule 16 (type-specifier)


State 33

   14 fun-declaration: type-specifier type_ID '(' params . ')' compound-stmt

    ')'  shift, and go to state 40


State 34

   17 params: param-list .
   19 param-list: param-list . ',' param

    ','  shift, and go to state 38

    $default  reduce using rule 17 (params)


State 35

   10 const-declaration: INT CONST type_ID '=' type_NUM . ';'

    ';'  shift, and go to state 41


State 36

   21 param: type-specifier type_ID .
   22      | type-specifier type_ID . '[' ']'

    '['  shift, and go to state 42

    $default  reduce using rule 21 (param)


State 37

   12 enum-declaration: ENUM type_ID '{' param-list '}' . ';'
   13                 | ENUM type_ID '{' param-list '}' . type_ID ';'

    ID   shift, and go to state 13
    ';'  shift, and go to state 43

    type_ID  go to state 44


State 38

   19 param-list: param-list ',' . param

    INT   shift, and go to state 25
    VOID  shift, and go to state 2

    type-specifier  go to state 26
    param           go to state 45


State 39

    9 var-declaration: type-specifier type_ID '[' type_NUM ']' . ';'

    ';'  shift, and go to state 46


State 40

   14 fun-declaration: type-specifier type_ID '(' params ')' . compound-stmt

    '{'  shift, and go to state 47

    compound-stmt  go to state 48


State 41

   10 const-declaration: INT CONST type_ID '=' type_NUM ';' .

    $default  reduce using rule 10 (const-declaration)


State 42

   22 param: type-specifier type_ID '[' . ']'

    ']'  shift, and go to state 49


State 43

   12 enum-declaration: ENUM type_ID '{' param-list '}' ';' .

    $default  reduce using rule 12 (enum-declaration)


State 44

   13 enum-declaration: ENUM type_ID '{' param-list '}' type_ID . ';'

    ';'  shift, and go to state 50


State 45

   19 param-list: param-list ',' param .

    $default  reduce using rule 19 (param-list)


State 46

    9 var-declaration: type-specifier type_ID '[' type_NUM ']' ';' .

    $default  reduce using rule 9 (var-declaration)


State 47

   23 compound-stmt: '{' . local-declarations statement-list '}'

    $default  reduce using rule 27 (local-declarations)

    local-declarations  go to state 51


State 48

   14 fun-declaration: type-specifier type_ID '(' params ')' compound-stmt .

    $default  reduce using rule 14 (fun-declaration)


State 49

   22 param: type-specifier type_ID '[' ']' .

    $default  reduce using rule 22 (param)


State 50

   13 enum-declaration: ENUM type_ID '{' param-list '}' type_ID ';' .

    $default  reduce using rule 13 (enum-declaration)


State 51

   23 compound-stmt: '{' local-declarations . statement-list '}'
   24 local-declarations: local-declarations . var-declaration
   25                   | local-declarations . const-declaration
   26                   | local-declarations . enum-declaration

    INT   shift, and go to state 1
    VOID  shift, and go to state 2
    ENUM  shift, and go to state 3

    $default  reduce using rule 29 (statement-list)

    var-declaration    go to state 52
    const-declaration  go to state 53
    enum-declaration   go to state 54
    type-specifier     go to state 55
    statement-list     go to state 56


State 52

   24 local-declarations: local-declarations var-declaration .

    $default  reduce using rule 24 (local-declarations)


State 53

   25 local-declarations: local-declarations const-declaration .

    $default  reduce using rule 25 (local-declarations)


State 54

   26 local-declarations: local-declarations enum-declaration .

    $default  reduce using rule 26 (local-declarations)


State 55

    8 var-declaration: type-specifier . type_ID ';'
    9                | type-specifier . type_ID '[' type_NUM ']' ';'

    ID  shift, and go to state 13

    type_ID  go to state 57


State 56

   23 compound-stmt: '{' local-declarations statement-list . '}'
   28 statement-list: statement-list . statement

    NUM     shift, and go to state 30
    ID      shift, and go to state 13
    IF      shift, and go to state 58
    RETURN  shift, and go to state 59
    WHILE   shift, and go to state 60
    INC     shift, and go to state 61
    DEC     shift, and go to state 62
    ';'     shift, and go to state 63
    '{'     shift, and go to state 47
    '}'     shift, and go to state 64
    '('     shift, and go to state 65
    '!'     shift, and go to state 66

    compound-stmt        go to state 67
    statement            go to state 68
    expression-stmt      go to state 69
    selection-stmt       go to state 70
    iteration-stmt       go to state 71
    return-stmt          go to state 72
    expression           go to state 73
    var                  go to state 74
    simple-expression    go to state 75
    additive-expression  go to state 76
    term                 go to state 77
    unary-expression     go to state 78
    unary_op             go to state 79
    factor               go to state 80
    call                 go to state 81
    type_NUM             go to state 82
    type_ID              go to state 83


State 57

    8 var-declaration: type-specifier type_ID . ';'
    9                | type-specifier type_ID . '[' type_NUM ']' ';'

    ';'  shift, and go to state 21
    '['  shift, and go to state 22


State 58

   37 selection-stmt: IF . '(' expression ')' statement
   38               | IF . '(' expression ')' statement ELSE statement

    '('  shift, and go to state 84


State 59

   40 return-stmt: RETURN . ';'
   41            | RETURN . expression ';'

    NUM  shift, and go to state 30
    ID   shift, and go to state 13
    INC  shift, and go to state 61
    DEC  shift, and go to state 62
    ';'  shift, and go to state 85
    '('  shift, and go to state 65
    '!'  shift, and go to state 66

    expression           go to state 86
    var                  go to state 74
    simple-expression    go to state 75
    additive-expression  go to state 76
    term                 go to state 77
    unary-expression     go to state 78
    unary_op             go to state 79
    factor               go to state 80
    call                 go to state 81
    type_NUM             go to state 82
    type_ID              go to state 83


State 60

   39 iteration-stmt: WHILE . '(' expression ')' statement

    '('  shift, and go to state 87


State 61

   67 unary_op: INC .

    $default  reduce using rule 67 (unary_op)


State 62

   66 unary_op: DEC .

    $default  reduce using rule 66 (unary_op)


State 63

   36 expression-stmt: ';' .

    $default  reduce using rule 36 (expression-stmt)


State 64

   23 compound-stmt: '{' local-declarations statement-list '}' .

    $default  reduce using rule 23 (compound-stmt)


State 65

   69 factor: '(' . expression ')'

    NUM  shift, and go to state 30
    ID   shift, and go to state 13
    INC  shift, and go to state 61
    DEC  shift, and go to state 62
    '('  shift, and go to state 65
    '!'  shift, and go to state 66

    expression           go to state 88
    var                  go to state 74
    simple-expression    go to state 75
    additive-expression  go to state 76
    term                 go to state 77
    unary-expression     go to state 78
    unary_op             go to state 79
    factor               go to state 80
    call                 go to state 81
    type_NUM             go to state 82
    type_ID              go to state 83


State 66

   65 unary_op: '!' .

    $default  reduce using rule 65 (unary_op)


State 67

   31 statement: compound-stmt .

    $default  reduce using rule 31 (statement)


State 68

   28 statement-list: statement-list statement .

    $default  reduce using rule 28 (statement-list)


State 69

   30 statement: expression-stmt .

    $default  reduce using rule 30 (statement)


State 70

   32 statement: selection-stmt .

    $default  reduce using rule 32 (statement)


State 71

   33 statement: iteration-stmt .

    $default  reduce using rule 33 (statement)


State 72

   34 statement: return-stmt .

    $default  reduce using rule 34 (statement)


State 73

   35 expression-stmt: expression . ';'

    ';'  shift, and go to state 89


State 74

   42 expression: var . '=' expression
   70 factor: var .

    '='  shift, and go to state 90

    $default  reduce using rule 70 (factor)


State 75

   43 expression: simple-expression .
   47 simple-expression: simple-expression . logop additive-expression

    AND  shift, and go to state 91
    OR   shift, and go to state 92

    $default  reduce using rule 43 (expression)

    logop  go to state 93


State 76

   46 simple-expression: additive-expression . relop additive-expression
   48                  | additive-expression .
   58 additive-expression: additive-expression . '+' term
   59                    | additive-expression . '-' term

    EQ    shift, and go to state 94
    NEQ   shift, and go to state 95
    LT    shift, and go to state 96
    GT    shift, and go to state 97
    LTEQ  shift, and go to state 98
    GTEQ  shift, and go to state 99
    '+'   shift, and go to state 100
    '-'   shift, and go to state 101

    $default  reduce using rule 48 (simple-expression)

    relop  go to state 102


State 77

   57 additive-expression: term .
   61 term: term . '*' factor
   62     | term . '/' factor

    '*'  shift, and go to state 103
    '/'  shift, and go to state 104

    $default  reduce using rule 57 (additive-expression)


State 78

   63 term: unary-expression .

    $default  reduce using rule 63 (term)


State 79

   64 unary-expression: unary_op . factor

    NUM  shift, and go to state 30
    ID   shift, and go to state 13
    '('  shift, and go to state 65

    var       go to state 105
    factor    go to state 106
    call      go to state 81
    type_NUM  go to state 82
    type_ID   go to state 83


State 80

   60 term: factor .

    $default  reduce using rule 60 (term)


State 81

   71 factor: call .

    $default  reduce using rule 71 (factor)


State 82

   68 factor: type_NUM .

    $default  reduce using rule 68 (factor)


State 83

   44 var: type_ID .
   45    | type_ID . '[' expression ']'
   72 call: type_ID . '(' args ')'

    '['  shift, and go to state 107
    '('  shift, and go to state 108

    $default  reduce using rule 44 (var)


State 84

   37 selection-stmt: IF '(' . expression ')' statement
   38               | IF '(' . expression ')' statement ELSE statement

    NUM  shift, and go to state 30
    ID   shift, and go to state 13
    INC  shift, and go to state 61
    DEC  shift, and go to state 62
    '('  shift, and go to state 65
    '!'  shift, and go to state 66

    expression           go to state 109
    var                  go to state 74
    simple-expression    go to state 75
    additive-expression  go to state 76
    term                 go to state 77
    unary-expression     go to state 78
    unary_op             go to state 79
    factor               go to state 80
    call                 go to state 81
    type_NUM             go to state 82
    type_ID              go to state 83


State 85

   40 return-stmt: RETURN ';' .

    $default  reduce using rule 40 (return-stmt)


State 86

   41 return-stmt: RETURN expression . ';'

    ';'  shift, and go to state 110


State 87

   39 iteration-stmt: WHILE '(' . expression ')' statement

    NUM  shift, and go to state 30
    ID   shift, and go to state 13
    INC  shift, and go to state 61
    DEC  shift, and go to state 62
    '('  shift, and go to state 65
    '!'  shift, and go to state 66

    expression           go to state 111
    var                  go to state 74
    simple-expression    go to state 75
    additive-expression  go to state 76
    term                 go to state 77
    unary-expression     go to state 78
    unary_op             go to state 79
    factor               go to state 80
    call                 go to state 81
    type_NUM             go to state 82
    type_ID              go to state 83


State 88

   69 factor: '(' expression . ')'

    ')'  shift, and go to state 112


State 89

   35 expression-stmt: expression ';' .

    $default  reduce using rule 35 (expression-stmt)


State 90

   42 expression: var '=' . expression

    NUM  shift, and go to state 30
    ID   shift, and go to state 13
    INC  shift, and go to state 61
    DEC  shift, and go to state 62
    '('  shift, and go to state 65
    '!'  shift, and go to state 66

    expression           go to state 113
    var                  go to state 74
    simple-expression    go to state 75
    additive-expression  go to state 76
    term                 go to state 77
    unary-expression     go to state 78
    unary_op             go to state 79
    factor               go to state 80
    call                 go to state 81
    type_NUM             go to state 82
    type_ID              go to state 83


State 91

   55 logop: AND .

    $default  reduce using rule 55 (logop)


State 92

   56 logop: OR .

    $default  reduce using rule 56 (logop)


State 93

   47 simple-expression: simple-expression logop . additive-expression

    NUM  shift, and go to state 30
    ID   shift, and go to state 13
    INC  shift, and go to state 61
    DEC  shift, and go to state 62
    '('  shift, and go to state 65
    '!'  shift, and go to state 66

    var                  go to state 105
    additive-expression  go to state 114
    term                 go to state 77
    unary-expression     go to state 78
    unary_op             go to state 79
    factor               go to state 80
    call                 go to state 81
    type_NUM             go to state 82
    type_ID              go to state 83


State 94

   53 relop: EQ .

    $default  reduce using rule 53 (relop)


State 95

   54 relop: NEQ .

    $default  reduce using rule 54 (relop)


State 96

   50 relop: LT .

    $default  reduce using rule 50 (relop)


State 97

   51 relop: GT .

    $default  reduce using rule 51 (relop)


State 98

   49 relop: LTEQ .

    $default  reduce using rule 49 (relop)


State 99

   52 relop: GTEQ .

    $default  reduce using rule 52 (relop)


State 100

   58 additive-expression: additive-expression '+' . term

    NUM  shift, and go to state 30
    ID   shift, and go to state 13
    INC  shift, and go to state 61
    DEC  shift, and go to state 62
    '('  shift, and go to state 65
    '!'  shift, and go to state 66

    var               go to state 105
    term              go to state 115
    unary-expression  go to state 78
    unary_op          go to state 79
    factor            go to state 80
    call              go to state 81
    type_NUM          go to state 82
    type_ID           go to state 83


State 101

   59 additive-expression: additive-expression '-' . term

    NUM  shift, and go to state 30
    ID   shift, and go to state 13
    INC  shift, and go to state 61
    DEC  shift, and go to state 62
    '('  shift, and go to state 65
    '!'  shift, and go to state 66

    var               go to state 105
    term              go to state 116
    unary-expression  go to state 78
    unary_op          go to state 79
    factor            go to state 80
    call              go to state 81
    type_NUM          go to state 82
    type_ID           go to state 83


State 102

   46 simple-expression: additive-expression relop . additive-expression

    NUM  shift, and go to state 30
    ID   shift, and go to state 13
    INC  shift, and go to state 61
    DEC  shift, and go to state 62
    '('  shift, and go to state 65
    '!'  shift, and go to state 66

    var                  go to state 105
    additive-expression  go to state 117
    term                 go to state 77
    unary-expression     go to state 78
    unary_op             go to state 79
    factor               go to state 80
    call                 go to state 81
    type_NUM             go to state 82
    type_ID              go to state 83


State 103

   61 term: term '*' . factor

    NUM  shift, and go to state 30
    ID   shift, and go to state 13
    '('  shift, and go to state 65

    var       go to state 105
    factor    go to state 118
    call      go to state 81
    type_NUM  go to state 82
    type_ID   go to state 83


State 104

   62 term: term '/' . factor

    NUM  shift, and go to state 30
    ID   shift, and go to state 13
    '('  shift, and go to state 65

    var       go to state 105
    factor    go to state 119
    call      go to state 81
    type_NUM  go to state 82
    type_ID   go to state 83


State 105

   70 factor: var .

    $default  reduce using rule 70 (factor)


State 106

   64 unary-expression: unary_op factor .

    $default  reduce using rule 64 (unary-expression)


State 107

   45 var: type_ID '[' . expression ']'

    NUM  shift, and go to state 30
    ID   shift, and go to state 13
    INC  shift, and go to state 61
    DEC  shift, and go to state 62
    '('  shift, and go to state 65
    '!'  shift, and go to state 66

    expression           go to state 120
    var                  go to state 74
    simple-expression    go to state 75
    additive-expression  go to state 76
    term                 go to state 77
    unary-expression     go to state 78
    unary_op             go to state 79
    factor               go to state 80
    call                 go to state 81
    type_NUM             go to state 82
    type_ID              go to state 83


State 108

   72 call: type_ID '(' . args ')'

    NUM  shift, and go to state 30
    ID   shift, and go to state 13
    INC  shift, and go to state 61
    DEC  shift, and go to state 62
    '('  shift, and go to state 65
    '!'  shift, and go to state 66

    $default  reduce using rule 74 (args)

    expression           go to state 121
    var                  go to state 74
    simple-expression    go to state 75
    additive-expression  go to state 76
    term                 go to state 77
    unary-expression     go to state 78
    unary_op             go to state 79
    factor               go to state 80
    call                 go to state 81
    args                 go to state 122
    args-list            go to state 123
    type_NUM             go to state 82
    type_ID              go to state 83


State 109

   37 selection-stmt: IF '(' expression . ')' statement
   38               | IF '(' expression . ')' statement ELSE statement

    ')'  shift, and go to state 124


State 110

   41 return-stmt: RETURN expression ';' .

    $default  reduce using rule 41 (return-stmt)


State 111

   39 iteration-stmt: WHILE '(' expression . ')' statement

    ')'  shift, and go to state 125


State 112

   69 factor: '(' expression ')' .

    $default  reduce using rule 69 (factor)


State 113

   42 expression: var '=' expression .

    $default  reduce using rule 42 (expression)


State 114

   47 simple-expression: simple-expression logop additive-expression .
   58 additive-expression: additive-expression . '+' term
   59                    | additive-expression . '-' term

    '+'  shift, and go to state 100
    '-'  shift, and go to state 101

    $default  reduce using rule 47 (simple-expression)


State 115

   58 additive-expression: additive-expression '+' term .
   61 term: term . '*' factor
   62     | term . '/' factor

    '*'  shift, and go to state 103
    '/'  shift, and go to state 104

    $default  reduce using rule 58 (additive-expression)


State 116

   59 additive-expression: additive-expression '-' term .
   61 term: term . '*' factor
   62     | term . '/' factor

    '*'  shift, and go to state 103
    '/'  shift, and go to state 104

    $default  reduce using rule 59 (additive-expression)


State 117

   46 simple-expression: additive-expression relop additive-expression .
   58 additive-expression: additive-expression . '+' term
   59                    | additive-expression . '-' term

    '+'  shift, and go to state 100
    '-'  shift, and go to state 101

    $default  reduce using rule 46 (simple-expression)


State 118

   61 term: term '*' factor .

    $default  reduce using rule 61 (term)


State 119

   62 term: term '/' factor .

    $default  reduce using rule 62 (term)


State 120

   45 var: type_ID '[' expression . ']'

    ']'  shift, and go to state 126


State 121

   75 args-list: expression .

    $default  reduce using rule 75 (args-list)


State 122

   72 call: type_ID '(' args . ')'

    ')'  shift, and go to state 127


State 123

   73 args: args-list .
   76 args-list: args-list . ',' expression

    ','  shift, and go to state 128

    $default  reduce using rule 73 (args)


State 124

   37 selection-stmt: IF '(' expression ')' . statement
   38               | IF '(' expression ')' . statement ELSE statement

    NUM     shift, and go to state 30
    ID      shift, and go to state 13
    IF      shift, and go to state 58
    RETURN  shift, and go to state 59
    WHILE   shift, and go to state 60
    INC     shift, and go to state 61
    DEC     shift, and go to state 62
    ';'     shift, and go to state 63
    '{'     shift, and go to state 47
    '('     shift, and go to state 65
    '!'     shift, and go to state 66

    compound-stmt        go to state 67
    statement            go to state 129
    expression-stmt      go to state 69
    selection-stmt       go to state 70
    iteration-stmt       go to state 71
    return-stmt          go to state 72
    expression           go to state 73
    var                  go to state 74
    simple-expression    go to state 75
    additive-expression  go to state 76
    term                 go to state 77
    unary-expression     go to state 78
    unary_op             go to state 79
    factor               go to state 80
    call                 go to state 81
    type_NUM             go to state 82
    type_ID              go to state 83


State 125

   39 iteration-stmt: WHILE '(' expression ')' . statement

    NUM     shift, and go to state 30
    ID      shift, and go to state 13
    IF      shift, and go to state 58
    RETURN  shift, and go to state 59
    WHILE   shift, and go to state 60
    INC     shift, and go to state 61
    DEC     shift, and go to state 62
    ';'     shift, and go to state 63
    '{'     shift, and go to state 47
    '('     shift, and go to state 65
    '!'     shift, and go to state 66

    compound-stmt        go to state 67
    statement            go to state 130
    expression-stmt      go to state 69
    selection-stmt       go to state 70
    iteration-stmt       go to state 71
    return-stmt          go to state 72
    expression           go to state 73
    var                  go to state 74
    simple-expression    go to state 75
    additive-expression  go to state 76
    term                 go to state 77
    unary-expression     go to state 78
    unary_op             go to state 79
    factor               go to state 80
    call                 go to state 81
    type_NUM             go to state 82
    type_ID              go to state 83


State 126

   45 var: type_ID '[' expression ']' .

    $default  reduce using rule 45 (var)


State 127

   72 call: type_ID '(' args ')' .

    $default  reduce using rule 72 (call)


State 128

   76 args-list: args-list ',' . expression

    NUM  shift, and go to state 30
    ID   shift, and go to state 13
    INC  shift, and go to state 61
    DEC  shift, and go to state 62
    '('  shift, and go to state 65
    '!'  shift, and go to state 66

    expression           go to state 131
    var                  go to state 74
    simple-expression    go to state 75
    additive-expression  go to state 76
    term                 go to state 77
    unary-expression     go to state 78
    unary_op             go to state 79
    factor               go to state 80
    call                 go to state 81
    type_NUM             go to state 82
    type_ID              go to state 83


State 129

   37 selection-stmt: IF '(' expression ')' statement .
   38               | IF '(' expression ')' statement . ELSE statement

    ELSE  shift, and go to state 132

    ELSE      [reduce using rule 37 (selection-stmt)]
    $default  reduce using rule 37 (selection-stmt)


State 130

   39 iteration-stmt: WHILE '(' expression ')' statement .

    $default  reduce using rule 39 (iteration-stmt)


State 131

   76 args-list: args-list ',' expression .

    $default  reduce using rule 76 (args-list)


State 132

   38 selection-stmt: IF '(' expression ')' statement ELSE . statement

    NUM     shift, and go to state 30
    ID      shift, and go to state 13
    IF      shift, and go to state 58
    RETURN  shift, and go to state 59
    WHILE   shift, and go to state 60
    INC     shift, and go to state 61
    DEC     shift, and go to state 62
    ';'     shift, and go to state 63
    '{'     shift, and go to state 47
    '('     shift, and go to state 65
    '!'     shift, and go to state 66

    compound-stmt        go to state 67
    statement            go to state 133
    expression-stmt      go to state 69
    selection-stmt       go to state 70
    iteration-stmt       go to state 71
    return-stmt          go to state 72
    expression           go to state 73
    var                  go to state 74
    simple-expression    go to state 75
    additive-expression  go to state 76
    term                 go to state 77
    unary-expression     go to state 78
    unary_op             go to state 79
    factor               go to state 80
    call                 go to state 81
    type_NUM             go to state 82
    type_ID              go to state 83


State 133

   38 selection-stmt: IF '(' expression ')' statement ELSE statement .

    $default  reduce using rule 38 (selection-stmt)
