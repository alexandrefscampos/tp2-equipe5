Nonterminals useless in grammar

    type_NUM


Terminals unused in grammar

    ERROR


Rules useless in grammar

   80 type_NUM: NUM


State 132 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: declaration-list

    2 declaration-list: declaration
    3                 | declaration-list declaration

    4 declaration: var-declaration
    5            | fun-declaration
    6            | const-declaration
    7            | enum-declaration

    8 var-declaration: type-specifier type_ID ';'
    9                | type-specifier ID '[' NUM ']' ';'

   10 const-declaration: INT CONST ID '=' NUM ';'

   11 enum-declaration: ENUM ID ID ';'
   12                 | ENUM ID '{' id-list '}' ';'
   13                 | ENUM ID '{' id-list '}' ID ';'

   14 id-list: ID
   15        | id-list ',' ID

   16 fun-declaration: type-specifier ID '(' params ')' compound-stmt

   17 type-specifier: INT
   18               | VOID

   19 params: param-list
   20       | VOID

   21 param-list: param-list ',' param
   22           | param

   23 param: type-specifier ID
   24      | type-specifier ID '[' ']'

   25 compound-stmt: '{' local-declarations statement-list '}'

   26 local-declarations: local-declarations var-declaration
   27                   | local-declarations const-declaration
   28                   | local-declarations enum-declaration
   29                   | %empty

   30 statement-list: statement-list statement
   31               | %empty

   32 statement: expression-stmt
   33          | compound-stmt
   34          | selection-stmt
   35          | iteration-stmt
   36          | return-stmt

   37 expression-stmt: expression ';'
   38                | ';'

   39 selection-stmt: IF '(' expression ')' statement
   40               | IF '(' expression ')' statement ELSE statement

   41 iteration-stmt: WHILE '(' expression ')' statement

   42 return-stmt: RETURN ';'
   43            | RETURN expression ';'

   44 expression: var '=' expression
   45           | simple-expression

   46 var: ID
   47    | ID '[' expression ']'

   48 simple-expression: additive-expression relop additive-expression
   49                  | simple-expression logop additive-expression
   50                  | additive-expression

   51 relop: LTEQ
   52      | LT
   53      | GT
   54      | GTEQ
   55      | EQ
   56      | NEQ

   57 logop: AND
   58      | OR

   59 additive-expression: term
   60                    | additive-expression '+' term
   61                    | additive-expression '-' term

   62 term: factor
   63     | term '*' factor
   64     | term '/' factor
   65     | unary-expression

   66 unary-expression: unary_op factor

   67 unary_op: '!'
   68         | DEC
   69         | INC

   70 factor: NUM
   71       | '(' expression ')'
   72       | var
   73       | call

   74 call: ID '(' args ')'

   75 args: args-list
   76     | %empty

   77 args-list: args-list ',' expression
   78          | expression

   79 type_ID: ID


Terminals, with rules where they appear

    $end (0) 0
    '!' (33) 67
    '(' (40) 16 39 40 41 71 74
    ')' (41) 16 39 40 41 71 74
    '*' (42) 63
    '+' (43) 60
    ',' (44) 15 21 77
    '-' (45) 61
    '/' (47) 64
    ';' (59) 8 9 10 11 12 13 37 38 42 43
    '=' (61) 10 44
    '[' (91) 9 24 47
    ']' (93) 9 24 47
    '{' (123) 12 13 25
    '}' (125) 12 13 25
    error (256)
    NUM (258) 9 10 70
    ID (259) 9 10 11 12 13 14 15 16 23 24 46 47 74 79
    ELSE (260) 40
    IF (261) 39 40
    INT (262) 10 17
    RETURN (263) 42 43
    VOID (264) 18 20
    WHILE (265) 41
    EQ (266) 55
    NEQ (267) 56
    LT (268) 52
    GT (269) 53
    LTEQ (270) 51
    GTEQ (271) 54
    ERROR (272)
    CONST (273) 10
    ENUM (274) 11 12 13
    AND (275) 57
    OR (276) 58
    INC (277) 69
    DEC (278) 68


Nonterminals, with rules where they appear

    $accept (38)
        on left: 0
    program (39)
        on left: 1
        on right: 0
    declaration-list <decl> (40)
        on left: 2 3
        on right: 1 3
    declaration <decl> (41)
        on left: 4 5 6 7
        on right: 2 3
    var-declaration <decl> (42)
        on left: 8 9
        on right: 4 26
    const-declaration <decl> (43)
        on left: 10
        on right: 6 27
    enum-declaration <decl> (44)
        on left: 11 12 13
        on right: 7 28
    id-list (45)
        on left: 14 15
        on right: 12 13 15
    fun-declaration <decl> (46)
        on left: 16
        on right: 5
    type-specifier <type> (47)
        on left: 17 18
        on right: 8 9 16 23 24
    params <param_list> (48)
        on left: 19 20
        on right: 16
    param-list <param_list> (49)
        on left: 21 22
        on right: 19 21
    param <param_list> (50)
        on left: 23 24
        on right: 21 22
    compound-stmt <stmt> (51)
        on left: 25
        on right: 16 33
    local-declarations <decl> (52)
        on left: 26 27 28 29
        on right: 25 26 27 28
    statement-list <stmt> (53)
        on left: 30 31
        on right: 25 30
    statement <stmt> (54)
        on left: 32 33 34 35 36
        on right: 30 39 40 41
    expression-stmt <stmt> (55)
        on left: 37 38
        on right: 32
    selection-stmt <stmt> (56)
        on left: 39 40
        on right: 34
    iteration-stmt <stmt> (57)
        on left: 41
        on right: 35
    return-stmt <stmt> (58)
        on left: 42 43
        on right: 36
    expression <expr> (59)
        on left: 44 45
        on right: 37 39 40 41 43 44 47 71 77 78
    var <expr> (60)
        on left: 46 47
        on right: 44 72
    simple-expression <expr> (61)
        on left: 48 49 50
        on right: 45 49
    relop <expr> (62)
        on left: 51 52 53 54 55 56
        on right: 48
    logop <expr> (63)
        on left: 57 58
        on right: 49
    additive-expression <expr> (64)
        on left: 59 60 61
        on right: 48 49 50 60 61
    term <expr> (65)
        on left: 62 63 64 65
        on right: 59 60 61 63 64
    unary-expression <expr> (66)
        on left: 66
        on right: 65
    unary_op <expr> (67)
        on left: 67 68 69
        on right: 66
    factor <expr> (68)
        on left: 70 71 72 73
        on right: 62 63 64 66
    call <expr> (69)
        on left: 74
        on right: 73
    args <expr> (70)
        on left: 75 76
        on right: 74
    args-list <expr> (71)
        on left: 77 78
        on right: 75 77
    type_ID <id> (72)
        on left: 79
        on right: 8


State 0

    0 $accept: . program $end

    INT   shift, and go to state 1
    VOID  shift, and go to state 2
    ENUM  shift, and go to state 3

    program            go to state 4
    declaration-list   go to state 5
    declaration        go to state 6
    var-declaration    go to state 7
    const-declaration  go to state 8
    enum-declaration   go to state 9
    fun-declaration    go to state 10
    type-specifier     go to state 11


State 1

   10 const-declaration: INT . CONST ID '=' NUM ';'
   17 type-specifier: INT .

    CONST  shift, and go to state 12

    $default  reduce using rule 17 (type-specifier)


State 2

   18 type-specifier: VOID .

    $default  reduce using rule 18 (type-specifier)


State 3

   11 enum-declaration: ENUM . ID ID ';'
   12                 | ENUM . ID '{' id-list '}' ';'
   13                 | ENUM . ID '{' id-list '}' ID ';'

    ID  shift, and go to state 13


State 4

    0 $accept: program . $end

    $end  shift, and go to state 14


State 5

    1 program: declaration-list .
    3 declaration-list: declaration-list . declaration

    INT   shift, and go to state 1
    VOID  shift, and go to state 2
    ENUM  shift, and go to state 3

    $default  reduce using rule 1 (program)

    declaration        go to state 15
    var-declaration    go to state 7
    const-declaration  go to state 8
    enum-declaration   go to state 9
    fun-declaration    go to state 10
    type-specifier     go to state 11


State 6

    2 declaration-list: declaration .

    $default  reduce using rule 2 (declaration-list)


State 7

    4 declaration: var-declaration .

    $default  reduce using rule 4 (declaration)


State 8

    6 declaration: const-declaration .

    $default  reduce using rule 6 (declaration)


State 9

    7 declaration: enum-declaration .

    $default  reduce using rule 7 (declaration)


State 10

    5 declaration: fun-declaration .

    $default  reduce using rule 5 (declaration)


State 11

    8 var-declaration: type-specifier . type_ID ';'
    9                | type-specifier . ID '[' NUM ']' ';'
   16 fun-declaration: type-specifier . ID '(' params ')' compound-stmt

    ID  shift, and go to state 16

    type_ID  go to state 17


State 12

   10 const-declaration: INT CONST . ID '=' NUM ';'

    ID  shift, and go to state 18


State 13

   11 enum-declaration: ENUM ID . ID ';'
   12                 | ENUM ID . '{' id-list '}' ';'
   13                 | ENUM ID . '{' id-list '}' ID ';'

    ID   shift, and go to state 19
    '{'  shift, and go to state 20


State 14

    0 $accept: program $end .

    $default  accept


State 15

    3 declaration-list: declaration-list declaration .

    $default  reduce using rule 3 (declaration-list)


State 16

    9 var-declaration: type-specifier ID . '[' NUM ']' ';'
   16 fun-declaration: type-specifier ID . '(' params ')' compound-stmt
   79 type_ID: ID .

    '['  shift, and go to state 21
    '('  shift, and go to state 22

    $default  reduce using rule 79 (type_ID)


State 17

    8 var-declaration: type-specifier type_ID . ';'

    ';'  shift, and go to state 23


State 18

   10 const-declaration: INT CONST ID . '=' NUM ';'

    '='  shift, and go to state 24


State 19

   11 enum-declaration: ENUM ID ID . ';'

    ';'  shift, and go to state 25


State 20

   12 enum-declaration: ENUM ID '{' . id-list '}' ';'
   13                 | ENUM ID '{' . id-list '}' ID ';'

    ID  shift, and go to state 26

    id-list  go to state 27


State 21

    9 var-declaration: type-specifier ID '[' . NUM ']' ';'

    NUM  shift, and go to state 28


State 22

   16 fun-declaration: type-specifier ID '(' . params ')' compound-stmt

    INT   shift, and go to state 29
    VOID  shift, and go to state 30

    type-specifier  go to state 31
    params          go to state 32
    param-list      go to state 33
    param           go to state 34


State 23

    8 var-declaration: type-specifier type_ID ';' .

    $default  reduce using rule 8 (var-declaration)


State 24

   10 const-declaration: INT CONST ID '=' . NUM ';'

    NUM  shift, and go to state 35


State 25

   11 enum-declaration: ENUM ID ID ';' .

    $default  reduce using rule 11 (enum-declaration)


State 26

   14 id-list: ID .

    $default  reduce using rule 14 (id-list)


State 27

   12 enum-declaration: ENUM ID '{' id-list . '}' ';'
   13                 | ENUM ID '{' id-list . '}' ID ';'
   15 id-list: id-list . ',' ID

    '}'  shift, and go to state 36
    ','  shift, and go to state 37


State 28

    9 var-declaration: type-specifier ID '[' NUM . ']' ';'

    ']'  shift, and go to state 38


State 29

   17 type-specifier: INT .

    $default  reduce using rule 17 (type-specifier)


State 30

   18 type-specifier: VOID .
   20 params: VOID .

    ')'       reduce using rule 20 (params)
    $default  reduce using rule 18 (type-specifier)


State 31

   23 param: type-specifier . ID
   24      | type-specifier . ID '[' ']'

    ID  shift, and go to state 39


State 32

   16 fun-declaration: type-specifier ID '(' params . ')' compound-stmt

    ')'  shift, and go to state 40


State 33

   19 params: param-list .
   21 param-list: param-list . ',' param

    ','  shift, and go to state 41

    $default  reduce using rule 19 (params)


State 34

   22 param-list: param .

    $default  reduce using rule 22 (param-list)


State 35

   10 const-declaration: INT CONST ID '=' NUM . ';'

    ';'  shift, and go to state 42


State 36

   12 enum-declaration: ENUM ID '{' id-list '}' . ';'
   13                 | ENUM ID '{' id-list '}' . ID ';'

    ID   shift, and go to state 43
    ';'  shift, and go to state 44


State 37

   15 id-list: id-list ',' . ID

    ID  shift, and go to state 45


State 38

    9 var-declaration: type-specifier ID '[' NUM ']' . ';'

    ';'  shift, and go to state 46


State 39

   23 param: type-specifier ID .
   24      | type-specifier ID . '[' ']'

    '['  shift, and go to state 47

    $default  reduce using rule 23 (param)


State 40

   16 fun-declaration: type-specifier ID '(' params ')' . compound-stmt

    '{'  shift, and go to state 48

    compound-stmt  go to state 49


State 41

   21 param-list: param-list ',' . param

    INT   shift, and go to state 29
    VOID  shift, and go to state 2

    type-specifier  go to state 31
    param           go to state 50


State 42

   10 const-declaration: INT CONST ID '=' NUM ';' .

    $default  reduce using rule 10 (const-declaration)


State 43

   13 enum-declaration: ENUM ID '{' id-list '}' ID . ';'

    ';'  shift, and go to state 51


State 44

   12 enum-declaration: ENUM ID '{' id-list '}' ';' .

    $default  reduce using rule 12 (enum-declaration)


State 45

   15 id-list: id-list ',' ID .

    $default  reduce using rule 15 (id-list)


State 46

    9 var-declaration: type-specifier ID '[' NUM ']' ';' .

    $default  reduce using rule 9 (var-declaration)


State 47

   24 param: type-specifier ID '[' . ']'

    ']'  shift, and go to state 52


State 48

   25 compound-stmt: '{' . local-declarations statement-list '}'

    $default  reduce using rule 29 (local-declarations)

    local-declarations  go to state 53


State 49

   16 fun-declaration: type-specifier ID '(' params ')' compound-stmt .

    $default  reduce using rule 16 (fun-declaration)


State 50

   21 param-list: param-list ',' param .

    $default  reduce using rule 21 (param-list)


State 51

   13 enum-declaration: ENUM ID '{' id-list '}' ID ';' .

    $default  reduce using rule 13 (enum-declaration)


State 52

   24 param: type-specifier ID '[' ']' .

    $default  reduce using rule 24 (param)


State 53

   25 compound-stmt: '{' local-declarations . statement-list '}'
   26 local-declarations: local-declarations . var-declaration
   27                   | local-declarations . const-declaration
   28                   | local-declarations . enum-declaration

    INT   shift, and go to state 1
    VOID  shift, and go to state 2
    ENUM  shift, and go to state 3

    $default  reduce using rule 31 (statement-list)

    var-declaration    go to state 54
    const-declaration  go to state 55
    enum-declaration   go to state 56
    type-specifier     go to state 57
    statement-list     go to state 58


State 54

   26 local-declarations: local-declarations var-declaration .

    $default  reduce using rule 26 (local-declarations)


State 55

   27 local-declarations: local-declarations const-declaration .

    $default  reduce using rule 27 (local-declarations)


State 56

   28 local-declarations: local-declarations enum-declaration .

    $default  reduce using rule 28 (local-declarations)


State 57

    8 var-declaration: type-specifier . type_ID ';'
    9                | type-specifier . ID '[' NUM ']' ';'

    ID  shift, and go to state 59

    type_ID  go to state 17


State 58

   25 compound-stmt: '{' local-declarations statement-list . '}'
   30 statement-list: statement-list . statement

    NUM     shift, and go to state 60
    ID      shift, and go to state 61
    IF      shift, and go to state 62
    RETURN  shift, and go to state 63
    WHILE   shift, and go to state 64
    INC     shift, and go to state 65
    DEC     shift, and go to state 66
    ';'     shift, and go to state 67
    '{'     shift, and go to state 48
    '}'     shift, and go to state 68
    '('     shift, and go to state 69
    '!'     shift, and go to state 70

    compound-stmt        go to state 71
    statement            go to state 72
    expression-stmt      go to state 73
    selection-stmt       go to state 74
    iteration-stmt       go to state 75
    return-stmt          go to state 76
    expression           go to state 77
    var                  go to state 78
    simple-expression    go to state 79
    additive-expression  go to state 80
    term                 go to state 81
    unary-expression     go to state 82
    unary_op             go to state 83
    factor               go to state 84
    call                 go to state 85


State 59

    9 var-declaration: type-specifier ID . '[' NUM ']' ';'
   79 type_ID: ID .

    '['  shift, and go to state 21

    $default  reduce using rule 79 (type_ID)


State 60

   70 factor: NUM .

    $default  reduce using rule 70 (factor)


State 61

   46 var: ID .
   47    | ID . '[' expression ']'
   74 call: ID . '(' args ')'

    '['  shift, and go to state 86
    '('  shift, and go to state 87

    $default  reduce using rule 46 (var)


State 62

   39 selection-stmt: IF . '(' expression ')' statement
   40               | IF . '(' expression ')' statement ELSE statement

    '('  shift, and go to state 88


State 63

   42 return-stmt: RETURN . ';'
   43            | RETURN . expression ';'

    NUM  shift, and go to state 60
    ID   shift, and go to state 61
    INC  shift, and go to state 65
    DEC  shift, and go to state 66
    ';'  shift, and go to state 89
    '('  shift, and go to state 69
    '!'  shift, and go to state 70

    expression           go to state 90
    var                  go to state 78
    simple-expression    go to state 79
    additive-expression  go to state 80
    term                 go to state 81
    unary-expression     go to state 82
    unary_op             go to state 83
    factor               go to state 84
    call                 go to state 85


State 64

   41 iteration-stmt: WHILE . '(' expression ')' statement

    '('  shift, and go to state 91


State 65

   69 unary_op: INC .

    $default  reduce using rule 69 (unary_op)


State 66

   68 unary_op: DEC .

    $default  reduce using rule 68 (unary_op)


State 67

   38 expression-stmt: ';' .

    $default  reduce using rule 38 (expression-stmt)


State 68

   25 compound-stmt: '{' local-declarations statement-list '}' .

    $default  reduce using rule 25 (compound-stmt)


State 69

   71 factor: '(' . expression ')'

    NUM  shift, and go to state 60
    ID   shift, and go to state 61
    INC  shift, and go to state 65
    DEC  shift, and go to state 66
    '('  shift, and go to state 69
    '!'  shift, and go to state 70

    expression           go to state 92
    var                  go to state 78
    simple-expression    go to state 79
    additive-expression  go to state 80
    term                 go to state 81
    unary-expression     go to state 82
    unary_op             go to state 83
    factor               go to state 84
    call                 go to state 85


State 70

   67 unary_op: '!' .

    $default  reduce using rule 67 (unary_op)


State 71

   33 statement: compound-stmt .

    $default  reduce using rule 33 (statement)


State 72

   30 statement-list: statement-list statement .

    $default  reduce using rule 30 (statement-list)


State 73

   32 statement: expression-stmt .

    $default  reduce using rule 32 (statement)


State 74

   34 statement: selection-stmt .

    $default  reduce using rule 34 (statement)


State 75

   35 statement: iteration-stmt .

    $default  reduce using rule 35 (statement)


State 76

   36 statement: return-stmt .

    $default  reduce using rule 36 (statement)


State 77

   37 expression-stmt: expression . ';'

    ';'  shift, and go to state 93


State 78

   44 expression: var . '=' expression
   72 factor: var .

    '='  shift, and go to state 94

    $default  reduce using rule 72 (factor)


State 79

   45 expression: simple-expression .
   49 simple-expression: simple-expression . logop additive-expression

    AND  shift, and go to state 95
    OR   shift, and go to state 96

    $default  reduce using rule 45 (expression)

    logop  go to state 97


State 80

   48 simple-expression: additive-expression . relop additive-expression
   50                  | additive-expression .
   60 additive-expression: additive-expression . '+' term
   61                    | additive-expression . '-' term

    EQ    shift, and go to state 98
    NEQ   shift, and go to state 99
    LT    shift, and go to state 100
    GT    shift, and go to state 101
    LTEQ  shift, and go to state 102
    GTEQ  shift, and go to state 103
    '+'   shift, and go to state 104
    '-'   shift, and go to state 105

    $default  reduce using rule 50 (simple-expression)

    relop  go to state 106


State 81

   59 additive-expression: term .
   63 term: term . '*' factor
   64     | term . '/' factor

    '*'  shift, and go to state 107
    '/'  shift, and go to state 108

    $default  reduce using rule 59 (additive-expression)


State 82

   65 term: unary-expression .

    $default  reduce using rule 65 (term)


State 83

   66 unary-expression: unary_op . factor

    NUM  shift, and go to state 60
    ID   shift, and go to state 61
    '('  shift, and go to state 69

    var     go to state 109
    factor  go to state 110
    call    go to state 85


State 84

   62 term: factor .

    $default  reduce using rule 62 (term)


State 85

   73 factor: call .

    $default  reduce using rule 73 (factor)


State 86

   47 var: ID '[' . expression ']'

    NUM  shift, and go to state 60
    ID   shift, and go to state 61
    INC  shift, and go to state 65
    DEC  shift, and go to state 66
    '('  shift, and go to state 69
    '!'  shift, and go to state 70

    expression           go to state 111
    var                  go to state 78
    simple-expression    go to state 79
    additive-expression  go to state 80
    term                 go to state 81
    unary-expression     go to state 82
    unary_op             go to state 83
    factor               go to state 84
    call                 go to state 85


State 87

   74 call: ID '(' . args ')'

    NUM  shift, and go to state 60
    ID   shift, and go to state 61
    INC  shift, and go to state 65
    DEC  shift, and go to state 66
    '('  shift, and go to state 69
    '!'  shift, and go to state 70

    $default  reduce using rule 76 (args)

    expression           go to state 112
    var                  go to state 78
    simple-expression    go to state 79
    additive-expression  go to state 80
    term                 go to state 81
    unary-expression     go to state 82
    unary_op             go to state 83
    factor               go to state 84
    call                 go to state 85
    args                 go to state 113
    args-list            go to state 114


State 88

   39 selection-stmt: IF '(' . expression ')' statement
   40               | IF '(' . expression ')' statement ELSE statement

    NUM  shift, and go to state 60
    ID   shift, and go to state 61
    INC  shift, and go to state 65
    DEC  shift, and go to state 66
    '('  shift, and go to state 69
    '!'  shift, and go to state 70

    expression           go to state 115
    var                  go to state 78
    simple-expression    go to state 79
    additive-expression  go to state 80
    term                 go to state 81
    unary-expression     go to state 82
    unary_op             go to state 83
    factor               go to state 84
    call                 go to state 85


State 89

   42 return-stmt: RETURN ';' .

    $default  reduce using rule 42 (return-stmt)


State 90

   43 return-stmt: RETURN expression . ';'

    ';'  shift, and go to state 116


State 91

   41 iteration-stmt: WHILE '(' . expression ')' statement

    NUM  shift, and go to state 60
    ID   shift, and go to state 61
    INC  shift, and go to state 65
    DEC  shift, and go to state 66
    '('  shift, and go to state 69
    '!'  shift, and go to state 70

    expression           go to state 117
    var                  go to state 78
    simple-expression    go to state 79
    additive-expression  go to state 80
    term                 go to state 81
    unary-expression     go to state 82
    unary_op             go to state 83
    factor               go to state 84
    call                 go to state 85


State 92

   71 factor: '(' expression . ')'

    ')'  shift, and go to state 118


State 93

   37 expression-stmt: expression ';' .

    $default  reduce using rule 37 (expression-stmt)


State 94

   44 expression: var '=' . expression

    NUM  shift, and go to state 60
    ID   shift, and go to state 61
    INC  shift, and go to state 65
    DEC  shift, and go to state 66
    '('  shift, and go to state 69
    '!'  shift, and go to state 70

    expression           go to state 119
    var                  go to state 78
    simple-expression    go to state 79
    additive-expression  go to state 80
    term                 go to state 81
    unary-expression     go to state 82
    unary_op             go to state 83
    factor               go to state 84
    call                 go to state 85


State 95

   57 logop: AND .

    $default  reduce using rule 57 (logop)


State 96

   58 logop: OR .

    $default  reduce using rule 58 (logop)


State 97

   49 simple-expression: simple-expression logop . additive-expression

    NUM  shift, and go to state 60
    ID   shift, and go to state 61
    INC  shift, and go to state 65
    DEC  shift, and go to state 66
    '('  shift, and go to state 69
    '!'  shift, and go to state 70

    var                  go to state 109
    additive-expression  go to state 120
    term                 go to state 81
    unary-expression     go to state 82
    unary_op             go to state 83
    factor               go to state 84
    call                 go to state 85


State 98

   55 relop: EQ .

    $default  reduce using rule 55 (relop)


State 99

   56 relop: NEQ .

    $default  reduce using rule 56 (relop)


State 100

   52 relop: LT .

    $default  reduce using rule 52 (relop)


State 101

   53 relop: GT .

    $default  reduce using rule 53 (relop)


State 102

   51 relop: LTEQ .

    $default  reduce using rule 51 (relop)


State 103

   54 relop: GTEQ .

    $default  reduce using rule 54 (relop)


State 104

   60 additive-expression: additive-expression '+' . term

    NUM  shift, and go to state 60
    ID   shift, and go to state 61
    INC  shift, and go to state 65
    DEC  shift, and go to state 66
    '('  shift, and go to state 69
    '!'  shift, and go to state 70

    var               go to state 109
    term              go to state 121
    unary-expression  go to state 82
    unary_op          go to state 83
    factor            go to state 84
    call              go to state 85


State 105

   61 additive-expression: additive-expression '-' . term

    NUM  shift, and go to state 60
    ID   shift, and go to state 61
    INC  shift, and go to state 65
    DEC  shift, and go to state 66
    '('  shift, and go to state 69
    '!'  shift, and go to state 70

    var               go to state 109
    term              go to state 122
    unary-expression  go to state 82
    unary_op          go to state 83
    factor            go to state 84
    call              go to state 85


State 106

   48 simple-expression: additive-expression relop . additive-expression

    NUM  shift, and go to state 60
    ID   shift, and go to state 61
    INC  shift, and go to state 65
    DEC  shift, and go to state 66
    '('  shift, and go to state 69
    '!'  shift, and go to state 70

    var                  go to state 109
    additive-expression  go to state 123
    term                 go to state 81
    unary-expression     go to state 82
    unary_op             go to state 83
    factor               go to state 84
    call                 go to state 85


State 107

   63 term: term '*' . factor

    NUM  shift, and go to state 60
    ID   shift, and go to state 61
    '('  shift, and go to state 69

    var     go to state 109
    factor  go to state 124
    call    go to state 85


State 108

   64 term: term '/' . factor

    NUM  shift, and go to state 60
    ID   shift, and go to state 61
    '('  shift, and go to state 69

    var     go to state 109
    factor  go to state 125
    call    go to state 85


State 109

   72 factor: var .

    $default  reduce using rule 72 (factor)


State 110

   66 unary-expression: unary_op factor .

    $default  reduce using rule 66 (unary-expression)


State 111

   47 var: ID '[' expression . ']'

    ']'  shift, and go to state 126


State 112

   78 args-list: expression .

    $default  reduce using rule 78 (args-list)


State 113

   74 call: ID '(' args . ')'

    ')'  shift, and go to state 127


State 114

   75 args: args-list .
   77 args-list: args-list . ',' expression

    ','  shift, and go to state 128

    $default  reduce using rule 75 (args)


State 115

   39 selection-stmt: IF '(' expression . ')' statement
   40               | IF '(' expression . ')' statement ELSE statement

    ')'  shift, and go to state 129


State 116

   43 return-stmt: RETURN expression ';' .

    $default  reduce using rule 43 (return-stmt)


State 117

   41 iteration-stmt: WHILE '(' expression . ')' statement

    ')'  shift, and go to state 130


State 118

   71 factor: '(' expression ')' .

    $default  reduce using rule 71 (factor)


State 119

   44 expression: var '=' expression .

    $default  reduce using rule 44 (expression)


State 120

   49 simple-expression: simple-expression logop additive-expression .
   60 additive-expression: additive-expression . '+' term
   61                    | additive-expression . '-' term

    '+'  shift, and go to state 104
    '-'  shift, and go to state 105

    $default  reduce using rule 49 (simple-expression)


State 121

   60 additive-expression: additive-expression '+' term .
   63 term: term . '*' factor
   64     | term . '/' factor

    '*'  shift, and go to state 107
    '/'  shift, and go to state 108

    $default  reduce using rule 60 (additive-expression)


State 122

   61 additive-expression: additive-expression '-' term .
   63 term: term . '*' factor
   64     | term . '/' factor

    '*'  shift, and go to state 107
    '/'  shift, and go to state 108

    $default  reduce using rule 61 (additive-expression)


State 123

   48 simple-expression: additive-expression relop additive-expression .
   60 additive-expression: additive-expression . '+' term
   61                    | additive-expression . '-' term

    '+'  shift, and go to state 104
    '-'  shift, and go to state 105

    $default  reduce using rule 48 (simple-expression)


State 124

   63 term: term '*' factor .

    $default  reduce using rule 63 (term)


State 125

   64 term: term '/' factor .

    $default  reduce using rule 64 (term)


State 126

   47 var: ID '[' expression ']' .

    $default  reduce using rule 47 (var)


State 127

   74 call: ID '(' args ')' .

    $default  reduce using rule 74 (call)


State 128

   77 args-list: args-list ',' . expression

    NUM  shift, and go to state 60
    ID   shift, and go to state 61
    INC  shift, and go to state 65
    DEC  shift, and go to state 66
    '('  shift, and go to state 69
    '!'  shift, and go to state 70

    expression           go to state 131
    var                  go to state 78
    simple-expression    go to state 79
    additive-expression  go to state 80
    term                 go to state 81
    unary-expression     go to state 82
    unary_op             go to state 83
    factor               go to state 84
    call                 go to state 85


State 129

   39 selection-stmt: IF '(' expression ')' . statement
   40               | IF '(' expression ')' . statement ELSE statement

    NUM     shift, and go to state 60
    ID      shift, and go to state 61
    IF      shift, and go to state 62
    RETURN  shift, and go to state 63
    WHILE   shift, and go to state 64
    INC     shift, and go to state 65
    DEC     shift, and go to state 66
    ';'     shift, and go to state 67
    '{'     shift, and go to state 48
    '('     shift, and go to state 69
    '!'     shift, and go to state 70

    compound-stmt        go to state 71
    statement            go to state 132
    expression-stmt      go to state 73
    selection-stmt       go to state 74
    iteration-stmt       go to state 75
    return-stmt          go to state 76
    expression           go to state 77
    var                  go to state 78
    simple-expression    go to state 79
    additive-expression  go to state 80
    term                 go to state 81
    unary-expression     go to state 82
    unary_op             go to state 83
    factor               go to state 84
    call                 go to state 85


State 130

   41 iteration-stmt: WHILE '(' expression ')' . statement

    NUM     shift, and go to state 60
    ID      shift, and go to state 61
    IF      shift, and go to state 62
    RETURN  shift, and go to state 63
    WHILE   shift, and go to state 64
    INC     shift, and go to state 65
    DEC     shift, and go to state 66
    ';'     shift, and go to state 67
    '{'     shift, and go to state 48
    '('     shift, and go to state 69
    '!'     shift, and go to state 70

    compound-stmt        go to state 71
    statement            go to state 133
    expression-stmt      go to state 73
    selection-stmt       go to state 74
    iteration-stmt       go to state 75
    return-stmt          go to state 76
    expression           go to state 77
    var                  go to state 78
    simple-expression    go to state 79
    additive-expression  go to state 80
    term                 go to state 81
    unary-expression     go to state 82
    unary_op             go to state 83
    factor               go to state 84
    call                 go to state 85


State 131

   77 args-list: args-list ',' expression .

    $default  reduce using rule 77 (args-list)


State 132

   39 selection-stmt: IF '(' expression ')' statement .
   40               | IF '(' expression ')' statement . ELSE statement

    ELSE  shift, and go to state 134

    ELSE      [reduce using rule 39 (selection-stmt)]
    $default  reduce using rule 39 (selection-stmt)


State 133

   41 iteration-stmt: WHILE '(' expression ')' statement .

    $default  reduce using rule 41 (iteration-stmt)


State 134

   40 selection-stmt: IF '(' expression ')' statement ELSE . statement

    NUM     shift, and go to state 60
    ID      shift, and go to state 61
    IF      shift, and go to state 62
    RETURN  shift, and go to state 63
    WHILE   shift, and go to state 64
    INC     shift, and go to state 65
    DEC     shift, and go to state 66
    ';'     shift, and go to state 67
    '{'     shift, and go to state 48
    '('     shift, and go to state 69
    '!'     shift, and go to state 70

    compound-stmt        go to state 71
    statement            go to state 135
    expression-stmt      go to state 73
    selection-stmt       go to state 74
    iteration-stmt       go to state 75
    return-stmt          go to state 76
    expression           go to state 77
    var                  go to state 78
    simple-expression    go to state 79
    additive-expression  go to state 80
    term                 go to state 81
    unary-expression     go to state 82
    unary_op             go to state 83
    factor               go to state 84
    call                 go to state 85


State 135

   40 selection-stmt: IF '(' expression ')' statement ELSE statement .

    $default  reduce using rule 40 (selection-stmt)
