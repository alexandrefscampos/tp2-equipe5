Terminals unused in grammar

    ERROR


State 133 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: declaration-list

    2 declaration-list: declaration
    3                 | declaration-list declaration

    4 declaration: var-declaration
    5            | fun-declaration
    6            | const-declaration
    7            | enum-declaration

    8 var-declaration: type-specifier type_ID ';'
    9                | type-specifier type_ID '[' type_NUM ']' ';'

   10 const-declaration: INT CONST type_ID '=' type_NUM ';'

   11 enum-declaration: ENUM type_ID type_ID ';'
   12                 | ENUM type_ID '{' id-list '}' ';'
   13                 | ENUM type_ID '{' id-list '}' type_ID ';'

   14 fun-declaration: type-specifier type_ID '(' params ')' compound-stmt

   15 type-specifier: INT
   16               | VOID

   17 params: param-list
   18       | VOID

   19 param-list: param-list ',' param
   20           | param

   21 param: type-specifier type_ID
   22      | type-specifier type_ID '[' ']'

   23 id-list: id-list ',' id
   24        | id

   25 id: type_ID

   26 compound-stmt: '{' local-declarations statement-list '}'

   27 local-declarations: local-declarations var-declaration
   28                   | local-declarations const-declaration
   29                   | local-declarations enum-declaration
   30                   | %empty

   31 statement-list: statement-list statement
   32               | %empty

   33 statement: expression-stmt
   34          | compound-stmt
   35          | selection-stmt
   36          | iteration-stmt
   37          | return-stmt

   38 expression-stmt: expression ';'
   39                | ';'

   40 selection-stmt: IF '(' expression ')' statement
   41               | IF '(' expression ')' statement ELSE statement

   42 iteration-stmt: WHILE '(' expression ')' statement

   43 return-stmt: RETURN ';'
   44            | RETURN expression ';'

   45 expression: var '=' expression
   46           | simple-expression

   47 var: type_ID
   48    | type_ID '[' expression ']'

   49 simple-expression: additive-expression relop additive-expression
   50                  | simple-expression logop additive-expression
   51                  | additive-expression

   52 relop: LTEQ
   53      | LT
   54      | GT
   55      | GTEQ
   56      | EQ
   57      | NEQ

   58 logop: AND
   59      | OR

   60 additive-expression: term
   61                    | additive-expression '+' term
   62                    | additive-expression '-' term

   63 term: factor
   64     | term '*' factor
   65     | term '/' factor
   66     | unary-expression

   67 unary-expression: unary_op factor

   68 unary_op: '!'
   69         | DEC
   70         | INC

   71 factor: type_NUM
   72       | '(' expression ')'
   73       | var
   74       | call

   75 call: type_ID '(' args ')'

   76 args: args-list
   77     | %empty

   78 args-list: expression
   79          | args-list ',' expression

   80 type_NUM: NUM

   81 type_ID: ID


Terminals, with rules where they appear

    $end (0) 0
    '!' (33) 68
    '(' (40) 14 40 41 42 72 75
    ')' (41) 14 40 41 42 72 75
    '*' (42) 64
    '+' (43) 61
    ',' (44) 19 23 79
    '-' (45) 62
    '/' (47) 65
    ';' (59) 8 9 10 11 12 13 38 39 43 44
    '=' (61) 10 45
    '[' (91) 9 22 48
    ']' (93) 9 22 48
    '{' (123) 12 13 26
    '}' (125) 12 13 26
    error (256)
    NUM (258) 80
    ID (259) 81
    ELSE (260) 41
    IF (261) 40 41
    INT (262) 10 15
    RETURN (263) 43 44
    VOID (264) 16 18
    WHILE (265) 42
    EQ (266) 56
    NEQ (267) 57
    LT (268) 53
    GT (269) 54
    LTEQ (270) 52
    GTEQ (271) 55
    ERROR (272)
    CONST (273) 10
    ENUM (274) 11 12 13
    AND (275) 58
    OR (276) 59
    INC (277) 70
    DEC (278) 69


Nonterminals, with rules where they appear

    $accept (38)
        on left: 0
    program (39)
        on left: 1
        on right: 0
    declaration-list <decl> (40)
        on left: 2 3
        on right: 1 3
    declaration <decl> (41)
        on left: 4 5 6 7
        on right: 2 3
    var-declaration <decl> (42)
        on left: 8 9
        on right: 4 27
    const-declaration <decl> (43)
        on left: 10
        on right: 6 28
    enum-declaration <decl> (44)
        on left: 11 12 13
        on right: 7 29
    fun-declaration <decl> (45)
        on left: 14
        on right: 5
    type-specifier <type> (46)
        on left: 15 16
        on right: 8 9 14 21 22
    params <param_list> (47)
        on left: 17 18
        on right: 14
    param-list <param_list> (48)
        on left: 19 20
        on right: 17 19
    param <param_list> (49)
        on left: 21 22
        on right: 19 20
    id-list <id_list> (50)
        on left: 23 24
        on right: 12 13 23
    id <id_list> (51)
        on left: 25
        on right: 23 24
    compound-stmt <stmt> (52)
        on left: 26
        on right: 14 34
    local-declarations <decl> (53)
        on left: 27 28 29 30
        on right: 26 27 28 29
    statement-list <stmt> (54)
        on left: 31 32
        on right: 26 31
    statement <stmt> (55)
        on left: 33 34 35 36 37
        on right: 31 40 41 42
    expression-stmt <stmt> (56)
        on left: 38 39
        on right: 33
    selection-stmt <stmt> (57)
        on left: 40 41
        on right: 35
    iteration-stmt <stmt> (58)
        on left: 42
        on right: 36
    return-stmt <stmt> (59)
        on left: 43 44
        on right: 37
    expression <expr> (60)
        on left: 45 46
        on right: 38 40 41 42 44 45 48 72 78 79
    var <expr> (61)
        on left: 47 48
        on right: 45 73
    simple-expression <expr> (62)
        on left: 49 50 51
        on right: 46 50
    relop <expr> (63)
        on left: 52 53 54 55 56 57
        on right: 49
    logop <expr> (64)
        on left: 58 59
        on right: 50
    additive-expression <expr> (65)
        on left: 60 61 62
        on right: 49 50 51 61 62
    term <expr> (66)
        on left: 63 64 65 66
        on right: 60 61 62 64 65
    unary-expression <expr> (67)
        on left: 67
        on right: 66
    unary_op <expr> (68)
        on left: 68 69 70
        on right: 67
    factor <expr> (69)
        on left: 71 72 73 74
        on right: 63 64 65 67
    call <expr> (70)
        on left: 75
        on right: 74
    args <expr> (71)
        on left: 76 77
        on right: 75
    args-list <expr> (72)
        on left: 78 79
        on right: 76 79
    type_NUM <num> (73)
        on left: 80
        on right: 9 10 71
    type_ID <id> (74)
        on left: 81
        on right: 8 9 10 11 12 13 14 21 22 25 47 48 75


State 0

    0 $accept: . program $end

    INT   shift, and go to state 1
    VOID  shift, and go to state 2
    ENUM  shift, and go to state 3

    program            go to state 4
    declaration-list   go to state 5
    declaration        go to state 6
    var-declaration    go to state 7
    const-declaration  go to state 8
    enum-declaration   go to state 9
    fun-declaration    go to state 10
    type-specifier     go to state 11


State 1

   10 const-declaration: INT . CONST type_ID '=' type_NUM ';'
   15 type-specifier: INT .

    CONST  shift, and go to state 12

    $default  reduce using rule 15 (type-specifier)


State 2

   16 type-specifier: VOID .

    $default  reduce using rule 16 (type-specifier)


State 3

   11 enum-declaration: ENUM . type_ID type_ID ';'
   12                 | ENUM . type_ID '{' id-list '}' ';'
   13                 | ENUM . type_ID '{' id-list '}' type_ID ';'

    ID  shift, and go to state 13

    type_ID  go to state 14


State 4

    0 $accept: program . $end

    $end  shift, and go to state 15


State 5

    1 program: declaration-list .
    3 declaration-list: declaration-list . declaration

    INT   shift, and go to state 1
    VOID  shift, and go to state 2
    ENUM  shift, and go to state 3

    $default  reduce using rule 1 (program)

    declaration        go to state 16
    var-declaration    go to state 7
    const-declaration  go to state 8
    enum-declaration   go to state 9
    fun-declaration    go to state 10
    type-specifier     go to state 11


State 6

    2 declaration-list: declaration .

    $default  reduce using rule 2 (declaration-list)


State 7

    4 declaration: var-declaration .

    $default  reduce using rule 4 (declaration)


State 8

    6 declaration: const-declaration .

    $default  reduce using rule 6 (declaration)


State 9

    7 declaration: enum-declaration .

    $default  reduce using rule 7 (declaration)


State 10

    5 declaration: fun-declaration .

    $default  reduce using rule 5 (declaration)


State 11

    8 var-declaration: type-specifier . type_ID ';'
    9                | type-specifier . type_ID '[' type_NUM ']' ';'
   14 fun-declaration: type-specifier . type_ID '(' params ')' compound-stmt

    ID  shift, and go to state 13

    type_ID  go to state 17


State 12

   10 const-declaration: INT CONST . type_ID '=' type_NUM ';'

    ID  shift, and go to state 13

    type_ID  go to state 18


State 13

   81 type_ID: ID .

    $default  reduce using rule 81 (type_ID)


State 14

   11 enum-declaration: ENUM type_ID . type_ID ';'
   12                 | ENUM type_ID . '{' id-list '}' ';'
   13                 | ENUM type_ID . '{' id-list '}' type_ID ';'

    ID   shift, and go to state 13
    '{'  shift, and go to state 19

    type_ID  go to state 20


State 15

    0 $accept: program $end .

    $default  accept


State 16

    3 declaration-list: declaration-list declaration .

    $default  reduce using rule 3 (declaration-list)


State 17

    8 var-declaration: type-specifier type_ID . ';'
    9                | type-specifier type_ID . '[' type_NUM ']' ';'
   14 fun-declaration: type-specifier type_ID . '(' params ')' compound-stmt

    ';'  shift, and go to state 21
    '['  shift, and go to state 22
    '('  shift, and go to state 23


State 18

   10 const-declaration: INT CONST type_ID . '=' type_NUM ';'

    '='  shift, and go to state 24


State 19

   12 enum-declaration: ENUM type_ID '{' . id-list '}' ';'
   13                 | ENUM type_ID '{' . id-list '}' type_ID ';'

    ID  shift, and go to state 13

    id-list  go to state 25
    id       go to state 26
    type_ID  go to state 27


State 20

   11 enum-declaration: ENUM type_ID type_ID . ';'

    ';'  shift, and go to state 28


State 21

    8 var-declaration: type-specifier type_ID ';' .

    $default  reduce using rule 8 (var-declaration)


State 22

    9 var-declaration: type-specifier type_ID '[' . type_NUM ']' ';'

    NUM  shift, and go to state 29

    type_NUM  go to state 30


State 23

   14 fun-declaration: type-specifier type_ID '(' . params ')' compound-stmt

    INT   shift, and go to state 31
    VOID  shift, and go to state 32

    type-specifier  go to state 33
    params          go to state 34
    param-list      go to state 35
    param           go to state 36


State 24

   10 const-declaration: INT CONST type_ID '=' . type_NUM ';'

    NUM  shift, and go to state 29

    type_NUM  go to state 37


State 25

   12 enum-declaration: ENUM type_ID '{' id-list . '}' ';'
   13                 | ENUM type_ID '{' id-list . '}' type_ID ';'
   23 id-list: id-list . ',' id

    '}'  shift, and go to state 38
    ','  shift, and go to state 39


State 26

   24 id-list: id .

    $default  reduce using rule 24 (id-list)


State 27

   25 id: type_ID .

    $default  reduce using rule 25 (id)


State 28

   11 enum-declaration: ENUM type_ID type_ID ';' .

    $default  reduce using rule 11 (enum-declaration)


State 29

   80 type_NUM: NUM .

    $default  reduce using rule 80 (type_NUM)


State 30

    9 var-declaration: type-specifier type_ID '[' type_NUM . ']' ';'

    ']'  shift, and go to state 40


State 31

   15 type-specifier: INT .

    $default  reduce using rule 15 (type-specifier)


State 32

   16 type-specifier: VOID .
   18 params: VOID .

    ')'       reduce using rule 18 (params)
    $default  reduce using rule 16 (type-specifier)


State 33

   21 param: type-specifier . type_ID
   22      | type-specifier . type_ID '[' ']'

    ID  shift, and go to state 13

    type_ID  go to state 41


State 34

   14 fun-declaration: type-specifier type_ID '(' params . ')' compound-stmt

    ')'  shift, and go to state 42


State 35

   17 params: param-list .
   19 param-list: param-list . ',' param

    ','  shift, and go to state 43

    $default  reduce using rule 17 (params)


State 36

   20 param-list: param .

    $default  reduce using rule 20 (param-list)


State 37

   10 const-declaration: INT CONST type_ID '=' type_NUM . ';'

    ';'  shift, and go to state 44


State 38

   12 enum-declaration: ENUM type_ID '{' id-list '}' . ';'
   13                 | ENUM type_ID '{' id-list '}' . type_ID ';'

    ID   shift, and go to state 13
    ';'  shift, and go to state 45

    type_ID  go to state 46


State 39

   23 id-list: id-list ',' . id

    ID  shift, and go to state 13

    id       go to state 47
    type_ID  go to state 27


State 40

    9 var-declaration: type-specifier type_ID '[' type_NUM ']' . ';'

    ';'  shift, and go to state 48


State 41

   21 param: type-specifier type_ID .
   22      | type-specifier type_ID . '[' ']'

    '['  shift, and go to state 49

    $default  reduce using rule 21 (param)


State 42

   14 fun-declaration: type-specifier type_ID '(' params ')' . compound-stmt

    '{'  shift, and go to state 50

    compound-stmt  go to state 51


State 43

   19 param-list: param-list ',' . param

    INT   shift, and go to state 31
    VOID  shift, and go to state 2

    type-specifier  go to state 33
    param           go to state 52


State 44

   10 const-declaration: INT CONST type_ID '=' type_NUM ';' .

    $default  reduce using rule 10 (const-declaration)


State 45

   12 enum-declaration: ENUM type_ID '{' id-list '}' ';' .

    $default  reduce using rule 12 (enum-declaration)


State 46

   13 enum-declaration: ENUM type_ID '{' id-list '}' type_ID . ';'

    ';'  shift, and go to state 53


State 47

   23 id-list: id-list ',' id .

    $default  reduce using rule 23 (id-list)


State 48

    9 var-declaration: type-specifier type_ID '[' type_NUM ']' ';' .

    $default  reduce using rule 9 (var-declaration)


State 49

   22 param: type-specifier type_ID '[' . ']'

    ']'  shift, and go to state 54


State 50

   26 compound-stmt: '{' . local-declarations statement-list '}'

    $default  reduce using rule 30 (local-declarations)

    local-declarations  go to state 55


State 51

   14 fun-declaration: type-specifier type_ID '(' params ')' compound-stmt .

    $default  reduce using rule 14 (fun-declaration)


State 52

   19 param-list: param-list ',' param .

    $default  reduce using rule 19 (param-list)


State 53

   13 enum-declaration: ENUM type_ID '{' id-list '}' type_ID ';' .

    $default  reduce using rule 13 (enum-declaration)


State 54

   22 param: type-specifier type_ID '[' ']' .

    $default  reduce using rule 22 (param)


State 55

   26 compound-stmt: '{' local-declarations . statement-list '}'
   27 local-declarations: local-declarations . var-declaration
   28                   | local-declarations . const-declaration
   29                   | local-declarations . enum-declaration

    INT   shift, and go to state 1
    VOID  shift, and go to state 2
    ENUM  shift, and go to state 3

    $default  reduce using rule 32 (statement-list)

    var-declaration    go to state 56
    const-declaration  go to state 57
    enum-declaration   go to state 58
    type-specifier     go to state 59
    statement-list     go to state 60


State 56

   27 local-declarations: local-declarations var-declaration .

    $default  reduce using rule 27 (local-declarations)


State 57

   28 local-declarations: local-declarations const-declaration .

    $default  reduce using rule 28 (local-declarations)


State 58

   29 local-declarations: local-declarations enum-declaration .

    $default  reduce using rule 29 (local-declarations)


State 59

    8 var-declaration: type-specifier . type_ID ';'
    9                | type-specifier . type_ID '[' type_NUM ']' ';'

    ID  shift, and go to state 13

    type_ID  go to state 61


State 60

   26 compound-stmt: '{' local-declarations statement-list . '}'
   31 statement-list: statement-list . statement

    NUM     shift, and go to state 29
    ID      shift, and go to state 13
    IF      shift, and go to state 62
    RETURN  shift, and go to state 63
    WHILE   shift, and go to state 64
    INC     shift, and go to state 65
    DEC     shift, and go to state 66
    ';'     shift, and go to state 67
    '{'     shift, and go to state 50
    '}'     shift, and go to state 68
    '('     shift, and go to state 69
    '!'     shift, and go to state 70

    compound-stmt        go to state 71
    statement            go to state 72
    expression-stmt      go to state 73
    selection-stmt       go to state 74
    iteration-stmt       go to state 75
    return-stmt          go to state 76
    expression           go to state 77
    var                  go to state 78
    simple-expression    go to state 79
    additive-expression  go to state 80
    term                 go to state 81
    unary-expression     go to state 82
    unary_op             go to state 83
    factor               go to state 84
    call                 go to state 85
    type_NUM             go to state 86
    type_ID              go to state 87


State 61

    8 var-declaration: type-specifier type_ID . ';'
    9                | type-specifier type_ID . '[' type_NUM ']' ';'

    ';'  shift, and go to state 21
    '['  shift, and go to state 22


State 62

   40 selection-stmt: IF . '(' expression ')' statement
   41               | IF . '(' expression ')' statement ELSE statement

    '('  shift, and go to state 88


State 63

   43 return-stmt: RETURN . ';'
   44            | RETURN . expression ';'

    NUM  shift, and go to state 29
    ID   shift, and go to state 13
    INC  shift, and go to state 65
    DEC  shift, and go to state 66
    ';'  shift, and go to state 89
    '('  shift, and go to state 69
    '!'  shift, and go to state 70

    expression           go to state 90
    var                  go to state 78
    simple-expression    go to state 79
    additive-expression  go to state 80
    term                 go to state 81
    unary-expression     go to state 82
    unary_op             go to state 83
    factor               go to state 84
    call                 go to state 85
    type_NUM             go to state 86
    type_ID              go to state 87


State 64

   42 iteration-stmt: WHILE . '(' expression ')' statement

    '('  shift, and go to state 91


State 65

   70 unary_op: INC .

    $default  reduce using rule 70 (unary_op)


State 66

   69 unary_op: DEC .

    $default  reduce using rule 69 (unary_op)


State 67

   39 expression-stmt: ';' .

    $default  reduce using rule 39 (expression-stmt)


State 68

   26 compound-stmt: '{' local-declarations statement-list '}' .

    $default  reduce using rule 26 (compound-stmt)


State 69

   72 factor: '(' . expression ')'

    NUM  shift, and go to state 29
    ID   shift, and go to state 13
    INC  shift, and go to state 65
    DEC  shift, and go to state 66
    '('  shift, and go to state 69
    '!'  shift, and go to state 70

    expression           go to state 92
    var                  go to state 78
    simple-expression    go to state 79
    additive-expression  go to state 80
    term                 go to state 81
    unary-expression     go to state 82
    unary_op             go to state 83
    factor               go to state 84
    call                 go to state 85
    type_NUM             go to state 86
    type_ID              go to state 87


State 70

   68 unary_op: '!' .

    $default  reduce using rule 68 (unary_op)


State 71

   34 statement: compound-stmt .

    $default  reduce using rule 34 (statement)


State 72

   31 statement-list: statement-list statement .

    $default  reduce using rule 31 (statement-list)


State 73

   33 statement: expression-stmt .

    $default  reduce using rule 33 (statement)


State 74

   35 statement: selection-stmt .

    $default  reduce using rule 35 (statement)


State 75

   36 statement: iteration-stmt .

    $default  reduce using rule 36 (statement)


State 76

   37 statement: return-stmt .

    $default  reduce using rule 37 (statement)


State 77

   38 expression-stmt: expression . ';'

    ';'  shift, and go to state 93


State 78

   45 expression: var . '=' expression
   73 factor: var .

    '='  shift, and go to state 94

    $default  reduce using rule 73 (factor)


State 79

   46 expression: simple-expression .
   50 simple-expression: simple-expression . logop additive-expression

    AND  shift, and go to state 95
    OR   shift, and go to state 96

    $default  reduce using rule 46 (expression)

    logop  go to state 97


State 80

   49 simple-expression: additive-expression . relop additive-expression
   51                  | additive-expression .
   61 additive-expression: additive-expression . '+' term
   62                    | additive-expression . '-' term

    EQ    shift, and go to state 98
    NEQ   shift, and go to state 99
    LT    shift, and go to state 100
    GT    shift, and go to state 101
    LTEQ  shift, and go to state 102
    GTEQ  shift, and go to state 103
    '+'   shift, and go to state 104
    '-'   shift, and go to state 105

    $default  reduce using rule 51 (simple-expression)

    relop  go to state 106


State 81

   60 additive-expression: term .
   64 term: term . '*' factor
   65     | term . '/' factor

    '*'  shift, and go to state 107
    '/'  shift, and go to state 108

    $default  reduce using rule 60 (additive-expression)


State 82

   66 term: unary-expression .

    $default  reduce using rule 66 (term)


State 83

   67 unary-expression: unary_op . factor

    NUM  shift, and go to state 29
    ID   shift, and go to state 13
    '('  shift, and go to state 69

    var       go to state 109
    factor    go to state 110
    call      go to state 85
    type_NUM  go to state 86
    type_ID   go to state 87


State 84

   63 term: factor .

    $default  reduce using rule 63 (term)


State 85

   74 factor: call .

    $default  reduce using rule 74 (factor)


State 86

   71 factor: type_NUM .

    $default  reduce using rule 71 (factor)


State 87

   47 var: type_ID .
   48    | type_ID . '[' expression ']'
   75 call: type_ID . '(' args ')'

    '['  shift, and go to state 111
    '('  shift, and go to state 112

    $default  reduce using rule 47 (var)


State 88

   40 selection-stmt: IF '(' . expression ')' statement
   41               | IF '(' . expression ')' statement ELSE statement

    NUM  shift, and go to state 29
    ID   shift, and go to state 13
    INC  shift, and go to state 65
    DEC  shift, and go to state 66
    '('  shift, and go to state 69
    '!'  shift, and go to state 70

    expression           go to state 113
    var                  go to state 78
    simple-expression    go to state 79
    additive-expression  go to state 80
    term                 go to state 81
    unary-expression     go to state 82
    unary_op             go to state 83
    factor               go to state 84
    call                 go to state 85
    type_NUM             go to state 86
    type_ID              go to state 87


State 89

   43 return-stmt: RETURN ';' .

    $default  reduce using rule 43 (return-stmt)


State 90

   44 return-stmt: RETURN expression . ';'

    ';'  shift, and go to state 114


State 91

   42 iteration-stmt: WHILE '(' . expression ')' statement

    NUM  shift, and go to state 29
    ID   shift, and go to state 13
    INC  shift, and go to state 65
    DEC  shift, and go to state 66
    '('  shift, and go to state 69
    '!'  shift, and go to state 70

    expression           go to state 115
    var                  go to state 78
    simple-expression    go to state 79
    additive-expression  go to state 80
    term                 go to state 81
    unary-expression     go to state 82
    unary_op             go to state 83
    factor               go to state 84
    call                 go to state 85
    type_NUM             go to state 86
    type_ID              go to state 87


State 92

   72 factor: '(' expression . ')'

    ')'  shift, and go to state 116


State 93

   38 expression-stmt: expression ';' .

    $default  reduce using rule 38 (expression-stmt)


State 94

   45 expression: var '=' . expression

    NUM  shift, and go to state 29
    ID   shift, and go to state 13
    INC  shift, and go to state 65
    DEC  shift, and go to state 66
    '('  shift, and go to state 69
    '!'  shift, and go to state 70

    expression           go to state 117
    var                  go to state 78
    simple-expression    go to state 79
    additive-expression  go to state 80
    term                 go to state 81
    unary-expression     go to state 82
    unary_op             go to state 83
    factor               go to state 84
    call                 go to state 85
    type_NUM             go to state 86
    type_ID              go to state 87


State 95

   58 logop: AND .

    $default  reduce using rule 58 (logop)


State 96

   59 logop: OR .

    $default  reduce using rule 59 (logop)


State 97

   50 simple-expression: simple-expression logop . additive-expression

    NUM  shift, and go to state 29
    ID   shift, and go to state 13
    INC  shift, and go to state 65
    DEC  shift, and go to state 66
    '('  shift, and go to state 69
    '!'  shift, and go to state 70

    var                  go to state 109
    additive-expression  go to state 118
    term                 go to state 81
    unary-expression     go to state 82
    unary_op             go to state 83
    factor               go to state 84
    call                 go to state 85
    type_NUM             go to state 86
    type_ID              go to state 87


State 98

   56 relop: EQ .

    $default  reduce using rule 56 (relop)


State 99

   57 relop: NEQ .

    $default  reduce using rule 57 (relop)


State 100

   53 relop: LT .

    $default  reduce using rule 53 (relop)


State 101

   54 relop: GT .

    $default  reduce using rule 54 (relop)


State 102

   52 relop: LTEQ .

    $default  reduce using rule 52 (relop)


State 103

   55 relop: GTEQ .

    $default  reduce using rule 55 (relop)


State 104

   61 additive-expression: additive-expression '+' . term

    NUM  shift, and go to state 29
    ID   shift, and go to state 13
    INC  shift, and go to state 65
    DEC  shift, and go to state 66
    '('  shift, and go to state 69
    '!'  shift, and go to state 70

    var               go to state 109
    term              go to state 119
    unary-expression  go to state 82
    unary_op          go to state 83
    factor            go to state 84
    call              go to state 85
    type_NUM          go to state 86
    type_ID           go to state 87


State 105

   62 additive-expression: additive-expression '-' . term

    NUM  shift, and go to state 29
    ID   shift, and go to state 13
    INC  shift, and go to state 65
    DEC  shift, and go to state 66
    '('  shift, and go to state 69
    '!'  shift, and go to state 70

    var               go to state 109
    term              go to state 120
    unary-expression  go to state 82
    unary_op          go to state 83
    factor            go to state 84
    call              go to state 85
    type_NUM          go to state 86
    type_ID           go to state 87


State 106

   49 simple-expression: additive-expression relop . additive-expression

    NUM  shift, and go to state 29
    ID   shift, and go to state 13
    INC  shift, and go to state 65
    DEC  shift, and go to state 66
    '('  shift, and go to state 69
    '!'  shift, and go to state 70

    var                  go to state 109
    additive-expression  go to state 121
    term                 go to state 81
    unary-expression     go to state 82
    unary_op             go to state 83
    factor               go to state 84
    call                 go to state 85
    type_NUM             go to state 86
    type_ID              go to state 87


State 107

   64 term: term '*' . factor

    NUM  shift, and go to state 29
    ID   shift, and go to state 13
    '('  shift, and go to state 69

    var       go to state 109
    factor    go to state 122
    call      go to state 85
    type_NUM  go to state 86
    type_ID   go to state 87


State 108

   65 term: term '/' . factor

    NUM  shift, and go to state 29
    ID   shift, and go to state 13
    '('  shift, and go to state 69

    var       go to state 109
    factor    go to state 123
    call      go to state 85
    type_NUM  go to state 86
    type_ID   go to state 87


State 109

   73 factor: var .

    $default  reduce using rule 73 (factor)


State 110

   67 unary-expression: unary_op factor .

    $default  reduce using rule 67 (unary-expression)


State 111

   48 var: type_ID '[' . expression ']'

    NUM  shift, and go to state 29
    ID   shift, and go to state 13
    INC  shift, and go to state 65
    DEC  shift, and go to state 66
    '('  shift, and go to state 69
    '!'  shift, and go to state 70

    expression           go to state 124
    var                  go to state 78
    simple-expression    go to state 79
    additive-expression  go to state 80
    term                 go to state 81
    unary-expression     go to state 82
    unary_op             go to state 83
    factor               go to state 84
    call                 go to state 85
    type_NUM             go to state 86
    type_ID              go to state 87


State 112

   75 call: type_ID '(' . args ')'

    NUM  shift, and go to state 29
    ID   shift, and go to state 13
    INC  shift, and go to state 65
    DEC  shift, and go to state 66
    '('  shift, and go to state 69
    '!'  shift, and go to state 70

    $default  reduce using rule 77 (args)

    expression           go to state 125
    var                  go to state 78
    simple-expression    go to state 79
    additive-expression  go to state 80
    term                 go to state 81
    unary-expression     go to state 82
    unary_op             go to state 83
    factor               go to state 84
    call                 go to state 85
    args                 go to state 126
    args-list            go to state 127
    type_NUM             go to state 86
    type_ID              go to state 87


State 113

   40 selection-stmt: IF '(' expression . ')' statement
   41               | IF '(' expression . ')' statement ELSE statement

    ')'  shift, and go to state 128


State 114

   44 return-stmt: RETURN expression ';' .

    $default  reduce using rule 44 (return-stmt)


State 115

   42 iteration-stmt: WHILE '(' expression . ')' statement

    ')'  shift, and go to state 129


State 116

   72 factor: '(' expression ')' .

    $default  reduce using rule 72 (factor)


State 117

   45 expression: var '=' expression .

    $default  reduce using rule 45 (expression)


State 118

   50 simple-expression: simple-expression logop additive-expression .
   61 additive-expression: additive-expression . '+' term
   62                    | additive-expression . '-' term

    '+'  shift, and go to state 104
    '-'  shift, and go to state 105

    $default  reduce using rule 50 (simple-expression)


State 119

   61 additive-expression: additive-expression '+' term .
   64 term: term . '*' factor
   65     | term . '/' factor

    '*'  shift, and go to state 107
    '/'  shift, and go to state 108

    $default  reduce using rule 61 (additive-expression)


State 120

   62 additive-expression: additive-expression '-' term .
   64 term: term . '*' factor
   65     | term . '/' factor

    '*'  shift, and go to state 107
    '/'  shift, and go to state 108

    $default  reduce using rule 62 (additive-expression)


State 121

   49 simple-expression: additive-expression relop additive-expression .
   61 additive-expression: additive-expression . '+' term
   62                    | additive-expression . '-' term

    '+'  shift, and go to state 104
    '-'  shift, and go to state 105

    $default  reduce using rule 49 (simple-expression)


State 122

   64 term: term '*' factor .

    $default  reduce using rule 64 (term)


State 123

   65 term: term '/' factor .

    $default  reduce using rule 65 (term)


State 124

   48 var: type_ID '[' expression . ']'

    ']'  shift, and go to state 130


State 125

   78 args-list: expression .

    $default  reduce using rule 78 (args-list)


State 126

   75 call: type_ID '(' args . ')'

    ')'  shift, and go to state 131


State 127

   76 args: args-list .
   79 args-list: args-list . ',' expression

    ','  shift, and go to state 132

    $default  reduce using rule 76 (args)


State 128

   40 selection-stmt: IF '(' expression ')' . statement
   41               | IF '(' expression ')' . statement ELSE statement

    NUM     shift, and go to state 29
    ID      shift, and go to state 13
    IF      shift, and go to state 62
    RETURN  shift, and go to state 63
    WHILE   shift, and go to state 64
    INC     shift, and go to state 65
    DEC     shift, and go to state 66
    ';'     shift, and go to state 67
    '{'     shift, and go to state 50
    '('     shift, and go to state 69
    '!'     shift, and go to state 70

    compound-stmt        go to state 71
    statement            go to state 133
    expression-stmt      go to state 73
    selection-stmt       go to state 74
    iteration-stmt       go to state 75
    return-stmt          go to state 76
    expression           go to state 77
    var                  go to state 78
    simple-expression    go to state 79
    additive-expression  go to state 80
    term                 go to state 81
    unary-expression     go to state 82
    unary_op             go to state 83
    factor               go to state 84
    call                 go to state 85
    type_NUM             go to state 86
    type_ID              go to state 87


State 129

   42 iteration-stmt: WHILE '(' expression ')' . statement

    NUM     shift, and go to state 29
    ID      shift, and go to state 13
    IF      shift, and go to state 62
    RETURN  shift, and go to state 63
    WHILE   shift, and go to state 64
    INC     shift, and go to state 65
    DEC     shift, and go to state 66
    ';'     shift, and go to state 67
    '{'     shift, and go to state 50
    '('     shift, and go to state 69
    '!'     shift, and go to state 70

    compound-stmt        go to state 71
    statement            go to state 134
    expression-stmt      go to state 73
    selection-stmt       go to state 74
    iteration-stmt       go to state 75
    return-stmt          go to state 76
    expression           go to state 77
    var                  go to state 78
    simple-expression    go to state 79
    additive-expression  go to state 80
    term                 go to state 81
    unary-expression     go to state 82
    unary_op             go to state 83
    factor               go to state 84
    call                 go to state 85
    type_NUM             go to state 86
    type_ID              go to state 87


State 130

   48 var: type_ID '[' expression ']' .

    $default  reduce using rule 48 (var)


State 131

   75 call: type_ID '(' args ')' .

    $default  reduce using rule 75 (call)


State 132

   79 args-list: args-list ',' . expression

    NUM  shift, and go to state 29
    ID   shift, and go to state 13
    INC  shift, and go to state 65
    DEC  shift, and go to state 66
    '('  shift, and go to state 69
    '!'  shift, and go to state 70

    expression           go to state 135
    var                  go to state 78
    simple-expression    go to state 79
    additive-expression  go to state 80
    term                 go to state 81
    unary-expression     go to state 82
    unary_op             go to state 83
    factor               go to state 84
    call                 go to state 85
    type_NUM             go to state 86
    type_ID              go to state 87


State 133

   40 selection-stmt: IF '(' expression ')' statement .
   41               | IF '(' expression ')' statement . ELSE statement

    ELSE  shift, and go to state 136

    ELSE      [reduce using rule 40 (selection-stmt)]
    $default  reduce using rule 40 (selection-stmt)


State 134

   42 iteration-stmt: WHILE '(' expression ')' statement .

    $default  reduce using rule 42 (iteration-stmt)


State 135

   79 args-list: args-list ',' expression .

    $default  reduce using rule 79 (args-list)


State 136

   41 selection-stmt: IF '(' expression ')' statement ELSE . statement

    NUM     shift, and go to state 29
    ID      shift, and go to state 13
    IF      shift, and go to state 62
    RETURN  shift, and go to state 63
    WHILE   shift, and go to state 64
    INC     shift, and go to state 65
    DEC     shift, and go to state 66
    ';'     shift, and go to state 67
    '{'     shift, and go to state 50
    '('     shift, and go to state 69
    '!'     shift, and go to state 70

    compound-stmt        go to state 71
    statement            go to state 137
    expression-stmt      go to state 73
    selection-stmt       go to state 74
    iteration-stmt       go to state 75
    return-stmt          go to state 76
    expression           go to state 77
    var                  go to state 78
    simple-expression    go to state 79
    additive-expression  go to state 80
    term                 go to state 81
    unary-expression     go to state 82
    unary_op             go to state 83
    factor               go to state 84
    call                 go to state 85
    type_NUM             go to state 86
    type_ID              go to state 87


State 137

   41 selection-stmt: IF '(' expression ')' statement ELSE statement .

    $default  reduce using rule 41 (selection-stmt)
